(() => {
  // node_modules/prosemirror-model/dist/index.js
  function findDiffStart(a, b, pos) {
    for (let i = 0; ; i++) {
      if (i == a.childCount || i == b.childCount)
        return a.childCount == b.childCount ? null : pos;
      let childA = a.child(i),
        childB = b.child(i);
      if (childA == childB) {
        pos += childA.nodeSize;
        continue;
      }
      if (!childA.sameMarkup(childB)) return pos;
      if (childA.isText && childA.text != childB.text) {
        for (let j = 0; childA.text[j] == childB.text[j]; j++) pos++;
        return pos;
      }
      if (childA.content.size || childB.content.size) {
        let inner = findDiffStart(childA.content, childB.content, pos + 1);
        if (inner != null) return inner;
      }
      pos += childA.nodeSize;
    }
  }
  function findDiffEnd(a, b, posA, posB) {
    for (let iA = a.childCount, iB = b.childCount; ; ) {
      if (iA == 0 || iB == 0) return iA == iB ? null : { a: posA, b: posB };
      let childA = a.child(--iA),
        childB = b.child(--iB),
        size = childA.nodeSize;
      if (childA == childB) {
        posA -= size;
        posB -= size;
        continue;
      }
      if (!childA.sameMarkup(childB)) return { a: posA, b: posB };
      if (childA.isText && childA.text != childB.text) {
        let same = 0,
          minSize = Math.min(childA.text.length, childB.text.length);
        while (
          same < minSize &&
          childA.text[childA.text.length - same - 1] ==
            childB.text[childB.text.length - same - 1]
        ) {
          same++;
          posA--;
          posB--;
        }
        return { a: posA, b: posB };
      }
      if (childA.content.size || childB.content.size) {
        let inner = findDiffEnd(
          childA.content,
          childB.content,
          posA - 1,
          posB - 1
        );
        if (inner) return inner;
      }
      posA -= size;
      posB -= size;
    }
  }
  var Fragment = class _Fragment {
    /**
    @internal
    */
    constructor(content, size) {
      this.content = content;
      this.size = size || 0;
      if (size == null)
        for (let i = 0; i < content.length; i++)
          this.size += content[i].nodeSize;
    }
    /**
    Invoke a callback for all descendant nodes between the given two
    positions (relative to start of this fragment). Doesn't descend
    into a node when the callback returns `false`.
    */
    nodesBetween(from, to, f, nodeStart = 0, parent) {
      for (let i = 0, pos = 0; pos < to; i++) {
        let child = this.content[i],
          end = pos + child.nodeSize;
        if (
          end > from &&
          f(child, nodeStart + pos, parent || null, i) !== false &&
          child.content.size
        ) {
          let start = pos + 1;
          child.nodesBetween(
            Math.max(0, from - start),
            Math.min(child.content.size, to - start),
            f,
            nodeStart + start
          );
        }
        pos = end;
      }
    }
    /**
    Call the given callback for every descendant node. `pos` will be
    relative to the start of the fragment. The callback may return
    `false` to prevent traversal of a given node's children.
    */
    descendants(f) {
      this.nodesBetween(0, this.size, f);
    }
    /**
    Extract the text between `from` and `to`. See the same method on
    [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
    */
    textBetween(from, to, blockSeparator, leafText) {
      let text = "",
        separated = true;
      this.nodesBetween(
        from,
        to,
        (node, pos) => {
          if (node.isText) {
            text += node.text.slice(Math.max(from, pos) - pos, to - pos);
            separated = !blockSeparator;
          } else if (node.isLeaf) {
            if (leafText) {
              text +=
                typeof leafText === "function" ? leafText(node) : leafText;
            } else if (node.type.spec.leafText) {
              text += node.type.spec.leafText(node);
            }
            separated = !blockSeparator;
          } else if (!separated && node.isBlock) {
            text += blockSeparator;
            separated = true;
          }
        },
        0
      );
      return text;
    }
    /**
    Create a new fragment containing the combined content of this
    fragment and the other.
    */
    append(other) {
      if (!other.size) return this;
      if (!this.size) return other;
      let last = this.lastChild,
        first2 = other.firstChild,
        content = this.content.slice(),
        i = 0;
      if (last.isText && last.sameMarkup(first2)) {
        content[content.length - 1] = last.withText(last.text + first2.text);
        i = 1;
      }
      for (; i < other.content.length; i++) content.push(other.content[i]);
      return new _Fragment(content, this.size + other.size);
    }
    /**
    Cut out the sub-fragment between the two given positions.
    */
    cut(from, to = this.size) {
      if (from == 0 && to == this.size) return this;
      let result = [],
        size = 0;
      if (to > from)
        for (let i = 0, pos = 0; pos < to; i++) {
          let child = this.content[i],
            end = pos + child.nodeSize;
          if (end > from) {
            if (pos < from || end > to) {
              if (child.isText)
                child = child.cut(
                  Math.max(0, from - pos),
                  Math.min(child.text.length, to - pos)
                );
              else
                child = child.cut(
                  Math.max(0, from - pos - 1),
                  Math.min(child.content.size, to - pos - 1)
                );
            }
            result.push(child);
            size += child.nodeSize;
          }
          pos = end;
        }
      return new _Fragment(result, size);
    }
    /**
    @internal
    */
    cutByIndex(from, to) {
      if (from == to) return _Fragment.empty;
      if (from == 0 && to == this.content.length) return this;
      return new _Fragment(this.content.slice(from, to));
    }
    /**
    Create a new fragment in which the node at the given index is
    replaced by the given node.
    */
    replaceChild(index, node) {
      let current = this.content[index];
      if (current == node) return this;
      let copy2 = this.content.slice();
      let size = this.size + node.nodeSize - current.nodeSize;
      copy2[index] = node;
      return new _Fragment(copy2, size);
    }
    /**
    Create a new fragment by prepending the given node to this
    fragment.
    */
    addToStart(node) {
      return new _Fragment(
        [node].concat(this.content),
        this.size + node.nodeSize
      );
    }
    /**
    Create a new fragment by appending the given node to this
    fragment.
    */
    addToEnd(node) {
      return new _Fragment(
        this.content.concat(node),
        this.size + node.nodeSize
      );
    }
    /**
    Compare this fragment to another one.
    */
    eq(other) {
      if (this.content.length != other.content.length) return false;
      for (let i = 0; i < this.content.length; i++)
        if (!this.content[i].eq(other.content[i])) return false;
      return true;
    }
    /**
    The first child of the fragment, or `null` if it is empty.
    */
    get firstChild() {
      return this.content.length ? this.content[0] : null;
    }
    /**
    The last child of the fragment, or `null` if it is empty.
    */
    get lastChild() {
      return this.content.length ? this.content[this.content.length - 1] : null;
    }
    /**
    The number of child nodes in this fragment.
    */
    get childCount() {
      return this.content.length;
    }
    /**
    Get the child node at the given index. Raise an error when the
    index is out of range.
    */
    child(index) {
      let found2 = this.content[index];
      if (!found2)
        throw new RangeError("Index " + index + " out of range for " + this);
      return found2;
    }
    /**
    Get the child node at the given index, if it exists.
    */
    maybeChild(index) {
      return this.content[index] || null;
    }
    /**
    Call `f` for every child node, passing the node, its offset
    into this parent node, and its index.
    */
    forEach(f) {
      for (let i = 0, p = 0; i < this.content.length; i++) {
        let child = this.content[i];
        f(child, p, i);
        p += child.nodeSize;
      }
    }
    /**
    Find the first position at which this fragment and another
    fragment differ, or `null` if they are the same.
    */
    findDiffStart(other, pos = 0) {
      return findDiffStart(this, other, pos);
    }
    /**
    Find the first position, searching from the end, at which this
    fragment and the given fragment differ, or `null` if they are
    the same. Since this position will not be the same in both
    nodes, an object with two separate positions is returned.
    */
    findDiffEnd(other, pos = this.size, otherPos = other.size) {
      return findDiffEnd(this, other, pos, otherPos);
    }
    /**
    Find the index and inner offset corresponding to a given relative
    position in this fragment. The result object will be reused
    (overwritten) the next time the function is called. (Not public.)
    */
    findIndex(pos, round = -1) {
      if (pos == 0) return retIndex(0, pos);
      if (pos == this.size) return retIndex(this.content.length, pos);
      if (pos > this.size || pos < 0)
        throw new RangeError(`Position ${pos} outside of fragment (${this})`);
      for (let i = 0, curPos = 0; ; i++) {
        let cur = this.child(i),
          end = curPos + cur.nodeSize;
        if (end >= pos) {
          if (end == pos || round > 0) return retIndex(i + 1, end);
          return retIndex(i, curPos);
        }
        curPos = end;
      }
    }
    /**
    Return a debugging string that describes this fragment.
    */
    toString() {
      return "<" + this.toStringInner() + ">";
    }
    /**
    @internal
    */
    toStringInner() {
      return this.content.join(", ");
    }
    /**
    Create a JSON-serializeable representation of this fragment.
    */
    toJSON() {
      return this.content.length ? this.content.map((n) => n.toJSON()) : null;
    }
    /**
    Deserialize a fragment from its JSON representation.
    */
    static fromJSON(schema, value) {
      if (!value) return _Fragment.empty;
      if (!Array.isArray(value))
        throw new RangeError("Invalid input for Fragment.fromJSON");
      return new _Fragment(value.map(schema.nodeFromJSON));
    }
    /**
    Build a fragment from an array of nodes. Ensures that adjacent
    text nodes with the same marks are joined together.
    */
    static fromArray(array) {
      if (!array.length) return _Fragment.empty;
      let joined,
        size = 0;
      for (let i = 0; i < array.length; i++) {
        let node = array[i];
        size += node.nodeSize;
        if (i && node.isText && array[i - 1].sameMarkup(node)) {
          if (!joined) joined = array.slice(0, i);
          joined[joined.length - 1] = node.withText(
            joined[joined.length - 1].text + node.text
          );
        } else if (joined) {
          joined.push(node);
        }
      }
      return new _Fragment(joined || array, size);
    }
    /**
    Create a fragment from something that can be interpreted as a
    set of nodes. For `null`, it returns the empty fragment. For a
    fragment, the fragment itself. For a node or array of nodes, a
    fragment containing those nodes.
    */
    static from(nodes) {
      if (!nodes) return _Fragment.empty;
      if (nodes instanceof _Fragment) return nodes;
      if (Array.isArray(nodes)) return this.fromArray(nodes);
      if (nodes.attrs) return new _Fragment([nodes], nodes.nodeSize);
      throw new RangeError(
        "Can not convert " +
          nodes +
          " to a Fragment" +
          (nodes.nodesBetween
            ? " (looks like multiple versions of prosemirror-model were loaded)"
            : "")
      );
    }
  };
  Fragment.empty = new Fragment([], 0);
  var found = { index: 0, offset: 0 };
  function retIndex(index, offset) {
    found.index = index;
    found.offset = offset;
    return found;
  }
  function compareDeep(a, b) {
    if (a === b) return true;
    if (!(a && typeof a == "object") || !(b && typeof b == "object"))
      return false;
    let array = Array.isArray(a);
    if (Array.isArray(b) != array) return false;
    if (array) {
      if (a.length != b.length) return false;
      for (let i = 0; i < a.length; i++)
        if (!compareDeep(a[i], b[i])) return false;
    } else {
      for (let p in a) if (!(p in b) || !compareDeep(a[p], b[p])) return false;
      for (let p in b) if (!(p in a)) return false;
    }
    return true;
  }
  var Mark = class _Mark {
    /**
    @internal
    */
    constructor(type, attrs) {
      this.type = type;
      this.attrs = attrs;
    }
    /**
    Given a set of marks, create a new set which contains this one as
    well, in the right position. If this mark is already in the set,
    the set itself is returned. If any marks that are set to be
    [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
    those are replaced by this one.
    */
    addToSet(set) {
      let copy2,
        placed = false;
      for (let i = 0; i < set.length; i++) {
        let other = set[i];
        if (this.eq(other)) return set;
        if (this.type.excludes(other.type)) {
          if (!copy2) copy2 = set.slice(0, i);
        } else if (other.type.excludes(this.type)) {
          return set;
        } else {
          if (!placed && other.type.rank > this.type.rank) {
            if (!copy2) copy2 = set.slice(0, i);
            copy2.push(this);
            placed = true;
          }
          if (copy2) copy2.push(other);
        }
      }
      if (!copy2) copy2 = set.slice();
      if (!placed) copy2.push(this);
      return copy2;
    }
    /**
    Remove this mark from the given set, returning a new set. If this
    mark is not in the set, the set itself is returned.
    */
    removeFromSet(set) {
      for (let i = 0; i < set.length; i++)
        if (this.eq(set[i])) return set.slice(0, i).concat(set.slice(i + 1));
      return set;
    }
    /**
    Test whether this mark is in the given set of marks.
    */
    isInSet(set) {
      for (let i = 0; i < set.length; i++) if (this.eq(set[i])) return true;
      return false;
    }
    /**
    Test whether this mark has the same type and attributes as
    another mark.
    */
    eq(other) {
      return (
        this == other ||
        (this.type == other.type && compareDeep(this.attrs, other.attrs))
      );
    }
    /**
    Convert this mark to a JSON-serializeable representation.
    */
    toJSON() {
      let obj = { type: this.type.name };
      for (let _ in this.attrs) {
        obj.attrs = this.attrs;
        break;
      }
      return obj;
    }
    /**
    Deserialize a mark from JSON.
    */
    static fromJSON(schema, json) {
      if (!json) throw new RangeError("Invalid input for Mark.fromJSON");
      let type = schema.marks[json.type];
      if (!type)
        throw new RangeError(
          `There is no mark type ${json.type} in this schema`
        );
      return type.create(json.attrs);
    }
    /**
    Test whether two sets of marks are identical.
    */
    static sameSet(a, b) {
      if (a == b) return true;
      if (a.length != b.length) return false;
      for (let i = 0; i < a.length; i++) if (!a[i].eq(b[i])) return false;
      return true;
    }
    /**
    Create a properly sorted mark set from null, a single mark, or an
    unsorted array of marks.
    */
    static setFrom(marks) {
      if (!marks || (Array.isArray(marks) && marks.length == 0))
        return _Mark.none;
      if (marks instanceof _Mark) return [marks];
      let copy2 = marks.slice();
      copy2.sort((a, b) => a.type.rank - b.type.rank);
      return copy2;
    }
  };
  Mark.none = [];
  var ReplaceError = class extends Error {};
  var Slice = class _Slice {
    /**
    Create a slice. When specifying a non-zero open depth, you must
    make sure that there are nodes of at least that depth at the
    appropriate side of the fragment—i.e. if the fragment is an
    empty paragraph node, `openStart` and `openEnd` can't be greater
    than 1.
    
    It is not necessary for the content of open nodes to conform to
    the schema's content constraints, though it should be a valid
    start/end/middle for such a node, depending on which sides are
    open.
    */
    constructor(content, openStart, openEnd) {
      this.content = content;
      this.openStart = openStart;
      this.openEnd = openEnd;
    }
    /**
    The size this slice would add when inserted into a document.
    */
    get size() {
      return this.content.size - this.openStart - this.openEnd;
    }
    /**
    @internal
    */
    insertAt(pos, fragment) {
      let content = insertInto(this.content, pos + this.openStart, fragment);
      return content && new _Slice(content, this.openStart, this.openEnd);
    }
    /**
    @internal
    */
    removeBetween(from, to) {
      return new _Slice(
        removeRange(this.content, from + this.openStart, to + this.openStart),
        this.openStart,
        this.openEnd
      );
    }
    /**
    Tests whether this slice is equal to another slice.
    */
    eq(other) {
      return (
        this.content.eq(other.content) &&
        this.openStart == other.openStart &&
        this.openEnd == other.openEnd
      );
    }
    /**
    @internal
    */
    toString() {
      return this.content + "(" + this.openStart + "," + this.openEnd + ")";
    }
    /**
    Convert a slice to a JSON-serializable representation.
    */
    toJSON() {
      if (!this.content.size) return null;
      let json = { content: this.content.toJSON() };
      if (this.openStart > 0) json.openStart = this.openStart;
      if (this.openEnd > 0) json.openEnd = this.openEnd;
      return json;
    }
    /**
    Deserialize a slice from its JSON representation.
    */
    static fromJSON(schema, json) {
      if (!json) return _Slice.empty;
      let openStart = json.openStart || 0,
        openEnd = json.openEnd || 0;
      if (typeof openStart != "number" || typeof openEnd != "number")
        throw new RangeError("Invalid input for Slice.fromJSON");
      return new _Slice(
        Fragment.fromJSON(schema, json.content),
        openStart,
        openEnd
      );
    }
    /**
    Create a slice from a fragment by taking the maximum possible
    open value on both side of the fragment.
    */
    static maxOpen(fragment, openIsolating = true) {
      let openStart = 0,
        openEnd = 0;
      for (
        let n = fragment.firstChild;
        n && !n.isLeaf && (openIsolating || !n.type.spec.isolating);
        n = n.firstChild
      )
        openStart++;
      for (
        let n = fragment.lastChild;
        n && !n.isLeaf && (openIsolating || !n.type.spec.isolating);
        n = n.lastChild
      )
        openEnd++;
      return new _Slice(fragment, openStart, openEnd);
    }
  };
  Slice.empty = new Slice(Fragment.empty, 0, 0);
  function removeRange(content, from, to) {
    let { index, offset } = content.findIndex(from),
      child = content.maybeChild(index);
    let { index: indexTo, offset: offsetTo } = content.findIndex(to);
    if (offset == from || child.isText) {
      if (offsetTo != to && !content.child(indexTo).isText)
        throw new RangeError("Removing non-flat range");
      return content.cut(0, from).append(content.cut(to));
    }
    if (index != indexTo) throw new RangeError("Removing non-flat range");
    return content.replaceChild(
      index,
      child.copy(removeRange(child.content, from - offset - 1, to - offset - 1))
    );
  }
  function insertInto(content, dist, insert, parent) {
    let { index, offset } = content.findIndex(dist),
      child = content.maybeChild(index);
    if (offset == dist || child.isText) {
      if (parent && !parent.canReplace(index, index, insert)) return null;
      return content.cut(0, dist).append(insert).append(content.cut(dist));
    }
    let inner = insertInto(child.content, dist - offset - 1, insert);
    return inner && content.replaceChild(index, child.copy(inner));
  }
  function replace($from, $to, slice) {
    if (slice.openStart > $from.depth)
      throw new ReplaceError("Inserted content deeper than insertion position");
    if ($from.depth - slice.openStart != $to.depth - slice.openEnd)
      throw new ReplaceError("Inconsistent open depths");
    return replaceOuter($from, $to, slice, 0);
  }
  function replaceOuter($from, $to, slice, depth) {
    let index = $from.index(depth),
      node = $from.node(depth);
    if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {
      let inner = replaceOuter($from, $to, slice, depth + 1);
      return node.copy(node.content.replaceChild(index, inner));
    } else if (!slice.content.size) {
      return close(node, replaceTwoWay($from, $to, depth));
    } else if (
      !slice.openStart &&
      !slice.openEnd &&
      $from.depth == depth &&
      $to.depth == depth
    ) {
      let parent = $from.parent,
        content = parent.content;
      return close(
        parent,
        content
          .cut(0, $from.parentOffset)
          .append(slice.content)
          .append(content.cut($to.parentOffset))
      );
    } else {
      let { start, end } = prepareSliceForReplace(slice, $from);
      return close(node, replaceThreeWay($from, start, end, $to, depth));
    }
  }
  function checkJoin(main, sub) {
    if (!sub.type.compatibleContent(main.type))
      throw new ReplaceError(
        "Cannot join " + sub.type.name + " onto " + main.type.name
      );
  }
  function joinable($before, $after, depth) {
    let node = $before.node(depth);
    checkJoin(node, $after.node(depth));
    return node;
  }
  function addNode(child, target) {
    let last = target.length - 1;
    if (last >= 0 && child.isText && child.sameMarkup(target[last]))
      target[last] = child.withText(target[last].text + child.text);
    else target.push(child);
  }
  function addRange($start, $end, depth, target) {
    let node = ($end || $start).node(depth);
    let startIndex = 0,
      endIndex = $end ? $end.index(depth) : node.childCount;
    if ($start) {
      startIndex = $start.index(depth);
      if ($start.depth > depth) {
        startIndex++;
      } else if ($start.textOffset) {
        addNode($start.nodeAfter, target);
        startIndex++;
      }
    }
    for (let i = startIndex; i < endIndex; i++) addNode(node.child(i), target);
    if ($end && $end.depth == depth && $end.textOffset)
      addNode($end.nodeBefore, target);
  }
  function close(node, content) {
    node.type.checkContent(content);
    return node.copy(content);
  }
  function replaceThreeWay($from, $start, $end, $to, depth) {
    let openStart = $from.depth > depth && joinable($from, $start, depth + 1);
    let openEnd = $to.depth > depth && joinable($end, $to, depth + 1);
    let content = [];
    addRange(null, $from, depth, content);
    if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {
      checkJoin(openStart, openEnd);
      addNode(
        close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)),
        content
      );
    } else {
      if (openStart)
        addNode(
          close(openStart, replaceTwoWay($from, $start, depth + 1)),
          content
        );
      addRange($start, $end, depth, content);
      if (openEnd)
        addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);
    }
    addRange($to, null, depth, content);
    return new Fragment(content);
  }
  function replaceTwoWay($from, $to, depth) {
    let content = [];
    addRange(null, $from, depth, content);
    if ($from.depth > depth) {
      let type = joinable($from, $to, depth + 1);
      addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);
    }
    addRange($to, null, depth, content);
    return new Fragment(content);
  }
  function prepareSliceForReplace(slice, $along) {
    let extra = $along.depth - slice.openStart,
      parent = $along.node(extra);
    let node = parent.copy(slice.content);
    for (let i = extra - 1; i >= 0; i--)
      node = $along.node(i).copy(Fragment.from(node));
    return {
      start: node.resolveNoCache(slice.openStart + extra),
      end: node.resolveNoCache(node.content.size - slice.openEnd - extra),
    };
  }
  var ResolvedPos = class _ResolvedPos {
    /**
    @internal
    */
    constructor(pos, path, parentOffset) {
      this.pos = pos;
      this.path = path;
      this.parentOffset = parentOffset;
      this.depth = path.length / 3 - 1;
    }
    /**
    @internal
    */
    resolveDepth(val) {
      if (val == null) return this.depth;
      if (val < 0) return this.depth + val;
      return val;
    }
    /**
    The parent node that the position points into. Note that even if
    a position points into a text node, that node is not considered
    the parent—text nodes are ‘flat’ in this model, and have no content.
    */
    get parent() {
      return this.node(this.depth);
    }
    /**
    The root node in which the position was resolved.
    */
    get doc() {
      return this.node(0);
    }
    /**
    The ancestor node at the given level. `p.node(p.depth)` is the
    same as `p.parent`.
    */
    node(depth) {
      return this.path[this.resolveDepth(depth) * 3];
    }
    /**
    The index into the ancestor at the given level. If this points
    at the 3rd node in the 2nd paragraph on the top level, for
    example, `p.index(0)` is 1 and `p.index(1)` is 2.
    */
    index(depth) {
      return this.path[this.resolveDepth(depth) * 3 + 1];
    }
    /**
    The index pointing after this position into the ancestor at the
    given level.
    */
    indexAfter(depth) {
      depth = this.resolveDepth(depth);
      return (
        this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)
      );
    }
    /**
    The (absolute) position at the start of the node at the given
    level.
    */
    start(depth) {
      depth = this.resolveDepth(depth);
      return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
    }
    /**
    The (absolute) position at the end of the node at the given
    level.
    */
    end(depth) {
      depth = this.resolveDepth(depth);
      return this.start(depth) + this.node(depth).content.size;
    }
    /**
    The (absolute) position directly before the wrapping node at the
    given level, or, when `depth` is `this.depth + 1`, the original
    position.
    */
    before(depth) {
      depth = this.resolveDepth(depth);
      if (!depth)
        throw new RangeError("There is no position before the top-level node");
      return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];
    }
    /**
    The (absolute) position directly after the wrapping node at the
    given level, or the original position when `depth` is `this.depth + 1`.
    */
    after(depth) {
      depth = this.resolveDepth(depth);
      if (!depth)
        throw new RangeError("There is no position after the top-level node");
      return depth == this.depth + 1
        ? this.pos
        : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;
    }
    /**
    When this position points into a text node, this returns the
    distance between the position and the start of the text node.
    Will be zero for positions that point between nodes.
    */
    get textOffset() {
      return this.pos - this.path[this.path.length - 1];
    }
    /**
    Get the node directly after the position, if any. If the position
    points into a text node, only the part of that node after the
    position is returned.
    */
    get nodeAfter() {
      let parent = this.parent,
        index = this.index(this.depth);
      if (index == parent.childCount) return null;
      let dOff = this.pos - this.path[this.path.length - 1],
        child = parent.child(index);
      return dOff ? parent.child(index).cut(dOff) : child;
    }
    /**
    Get the node directly before the position, if any. If the
    position points into a text node, only the part of that node
    before the position is returned.
    */
    get nodeBefore() {
      let index = this.index(this.depth);
      let dOff = this.pos - this.path[this.path.length - 1];
      if (dOff) return this.parent.child(index).cut(0, dOff);
      return index == 0 ? null : this.parent.child(index - 1);
    }
    /**
    Get the position at the given index in the parent node at the
    given depth (which defaults to `this.depth`).
    */
    posAtIndex(index, depth) {
      depth = this.resolveDepth(depth);
      let node = this.path[depth * 3],
        pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
      for (let i = 0; i < index; i++) pos += node.child(i).nodeSize;
      return pos;
    }
    /**
    Get the marks at this position, factoring in the surrounding
    marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
    position is at the start of a non-empty node, the marks of the
    node after it (if any) are returned.
    */
    marks() {
      let parent = this.parent,
        index = this.index();
      if (parent.content.size == 0) return Mark.none;
      if (this.textOffset) return parent.child(index).marks;
      let main = parent.maybeChild(index - 1),
        other = parent.maybeChild(index);
      if (!main) {
        let tmp = main;
        main = other;
        other = tmp;
      }
      let marks = main.marks;
      for (var i = 0; i < marks.length; i++)
        if (
          marks[i].type.spec.inclusive === false &&
          (!other || !marks[i].isInSet(other.marks))
        )
          marks = marks[i--].removeFromSet(marks);
      return marks;
    }
    /**
    Get the marks after the current position, if any, except those
    that are non-inclusive and not present at position `$end`. This
    is mostly useful for getting the set of marks to preserve after a
    deletion. Will return `null` if this position is at the end of
    its parent node or its parent node isn't a textblock (in which
    case no marks should be preserved).
    */
    marksAcross($end) {
      let after = this.parent.maybeChild(this.index());
      if (!after || !after.isInline) return null;
      let marks = after.marks,
        next = $end.parent.maybeChild($end.index());
      for (var i = 0; i < marks.length; i++)
        if (
          marks[i].type.spec.inclusive === false &&
          (!next || !marks[i].isInSet(next.marks))
        )
          marks = marks[i--].removeFromSet(marks);
      return marks;
    }
    /**
    The depth up to which this position and the given (non-resolved)
    position share the same parent nodes.
    */
    sharedDepth(pos) {
      for (let depth = this.depth; depth > 0; depth--)
        if (this.start(depth) <= pos && this.end(depth) >= pos) return depth;
      return 0;
    }
    /**
    Returns a range based on the place where this position and the
    given position diverge around block content. If both point into
    the same textblock, for example, a range around that textblock
    will be returned. If they point into different blocks, the range
    around those blocks in their shared ancestor is returned. You can
    pass in an optional predicate that will be called with a parent
    node to see if a range into that parent is acceptable.
    */
    blockRange(other = this, pred) {
      if (other.pos < this.pos) return other.blockRange(this);
      for (
        let d =
          this.depth -
          (this.parent.inlineContent || this.pos == other.pos ? 1 : 0);
        d >= 0;
        d--
      )
        if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))
          return new NodeRange(this, other, d);
      return null;
    }
    /**
    Query whether the given position shares the same parent node.
    */
    sameParent(other) {
      return this.pos - this.parentOffset == other.pos - other.parentOffset;
    }
    /**
    Return the greater of this and the given position.
    */
    max(other) {
      return other.pos > this.pos ? other : this;
    }
    /**
    Return the smaller of this and the given position.
    */
    min(other) {
      return other.pos < this.pos ? other : this;
    }
    /**
    @internal
    */
    toString() {
      let str = "";
      for (let i = 1; i <= this.depth; i++)
        str +=
          (str ? "/" : "") + this.node(i).type.name + "_" + this.index(i - 1);
      return str + ":" + this.parentOffset;
    }
    /**
    @internal
    */
    static resolve(doc, pos) {
      if (!(pos >= 0 && pos <= doc.content.size))
        throw new RangeError("Position " + pos + " out of range");
      let path = [];
      let start = 0,
        parentOffset = pos;
      for (let node = doc; ; ) {
        let { index, offset } = node.content.findIndex(parentOffset);
        let rem = parentOffset - offset;
        path.push(node, index, start + offset);
        if (!rem) break;
        node = node.child(index);
        if (node.isText) break;
        parentOffset = rem - 1;
        start += offset + 1;
      }
      return new _ResolvedPos(pos, path, parentOffset);
    }
    /**
    @internal
    */
    static resolveCached(doc, pos) {
      for (let i = 0; i < resolveCache.length; i++) {
        let cached = resolveCache[i];
        if (cached.pos == pos && cached.doc == doc) return cached;
      }
      let result = (resolveCache[resolveCachePos] = _ResolvedPos.resolve(
        doc,
        pos
      ));
      resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
      return result;
    }
  };
  var resolveCache = [];
  var resolveCachePos = 0;
  var resolveCacheSize = 12;
  var NodeRange = class {
    /**
    Construct a node range. `$from` and `$to` should point into the
    same node until at least the given `depth`, since a node range
    denotes an adjacent set of nodes in a single parent node.
    */
    constructor($from, $to, depth) {
      this.$from = $from;
      this.$to = $to;
      this.depth = depth;
    }
    /**
    The position at the start of the range.
    */
    get start() {
      return this.$from.before(this.depth + 1);
    }
    /**
    The position at the end of the range.
    */
    get end() {
      return this.$to.after(this.depth + 1);
    }
    /**
    The parent node that the range points into.
    */
    get parent() {
      return this.$from.node(this.depth);
    }
    /**
    The start index of the range in the parent node.
    */
    get startIndex() {
      return this.$from.index(this.depth);
    }
    /**
    The end index of the range in the parent node.
    */
    get endIndex() {
      return this.$to.indexAfter(this.depth);
    }
  };
  var emptyAttrs = /* @__PURE__ */ Object.create(null);
  var Node = class _Node {
    /**
    @internal
    */
    constructor(type, attrs, content, marks = Mark.none) {
      this.type = type;
      this.attrs = attrs;
      this.marks = marks;
      this.content = content || Fragment.empty;
    }
    /**
    The size of this node, as defined by the integer-based [indexing
    scheme](/docs/guide/#doc.indexing). For text nodes, this is the
    amount of characters. For other leaf nodes, it is one. For
    non-leaf nodes, it is the size of the content plus two (the
    start and end token).
    */
    get nodeSize() {
      return this.isLeaf ? 1 : 2 + this.content.size;
    }
    /**
    The number of children that the node has.
    */
    get childCount() {
      return this.content.childCount;
    }
    /**
    Get the child node at the given index. Raises an error when the
    index is out of range.
    */
    child(index) {
      return this.content.child(index);
    }
    /**
    Get the child node at the given index, if it exists.
    */
    maybeChild(index) {
      return this.content.maybeChild(index);
    }
    /**
    Call `f` for every child node, passing the node, its offset
    into this parent node, and its index.
    */
    forEach(f) {
      this.content.forEach(f);
    }
    /**
    Invoke a callback for all descendant nodes recursively between
    the given two positions that are relative to start of this
    node's content. The callback is invoked with the node, its
    position relative to the original node (method receiver),
    its parent node, and its child index. When the callback returns
    false for a given node, that node's children will not be
    recursed over. The last parameter can be used to specify a
    starting position to count from.
    */
    nodesBetween(from, to, f, startPos = 0) {
      this.content.nodesBetween(from, to, f, startPos, this);
    }
    /**
    Call the given callback for every descendant node. Doesn't
    descend into a node when the callback returns `false`.
    */
    descendants(f) {
      this.nodesBetween(0, this.content.size, f);
    }
    /**
    Concatenates all the text nodes found in this fragment and its
    children.
    */
    get textContent() {
      return this.isLeaf && this.type.spec.leafText
        ? this.type.spec.leafText(this)
        : this.textBetween(0, this.content.size, "");
    }
    /**
    Get all text between positions `from` and `to`. When
    `blockSeparator` is given, it will be inserted to separate text
    from different block nodes. If `leafText` is given, it'll be
    inserted for every non-text leaf node encountered, otherwise
    [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
    */
    textBetween(from, to, blockSeparator, leafText) {
      return this.content.textBetween(from, to, blockSeparator, leafText);
    }
    /**
    Returns this node's first child, or `null` if there are no
    children.
    */
    get firstChild() {
      return this.content.firstChild;
    }
    /**
    Returns this node's last child, or `null` if there are no
    children.
    */
    get lastChild() {
      return this.content.lastChild;
    }
    /**
    Test whether two nodes represent the same piece of document.
    */
    eq(other) {
      return (
        this == other ||
        (this.sameMarkup(other) && this.content.eq(other.content))
      );
    }
    /**
    Compare the markup (type, attributes, and marks) of this node to
    those of another. Returns `true` if both have the same markup.
    */
    sameMarkup(other) {
      return this.hasMarkup(other.type, other.attrs, other.marks);
    }
    /**
    Check whether this node's markup correspond to the given type,
    attributes, and marks.
    */
    hasMarkup(type, attrs, marks) {
      return (
        this.type == type &&
        compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&
        Mark.sameSet(this.marks, marks || Mark.none)
      );
    }
    /**
    Create a new node with the same markup as this node, containing
    the given content (or empty, if no content is given).
    */
    copy(content = null) {
      if (content == this.content) return this;
      return new _Node(this.type, this.attrs, content, this.marks);
    }
    /**
    Create a copy of this node, with the given set of marks instead
    of the node's own marks.
    */
    mark(marks) {
      return marks == this.marks
        ? this
        : new _Node(this.type, this.attrs, this.content, marks);
    }
    /**
    Create a copy of this node with only the content between the
    given positions. If `to` is not given, it defaults to the end of
    the node.
    */
    cut(from, to = this.content.size) {
      if (from == 0 && to == this.content.size) return this;
      return this.copy(this.content.cut(from, to));
    }
    /**
    Cut out the part of the document between the given positions, and
    return it as a `Slice` object.
    */
    slice(from, to = this.content.size, includeParents = false) {
      if (from == to) return Slice.empty;
      let $from = this.resolve(from),
        $to = this.resolve(to);
      let depth = includeParents ? 0 : $from.sharedDepth(to);
      let start = $from.start(depth),
        node = $from.node(depth);
      let content = node.content.cut($from.pos - start, $to.pos - start);
      return new Slice(content, $from.depth - depth, $to.depth - depth);
    }
    /**
    Replace the part of the document between the given positions with
    the given slice. The slice must 'fit', meaning its open sides
    must be able to connect to the surrounding content, and its
    content nodes must be valid children for the node they are placed
    into. If any of this is violated, an error of type
    [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
    */
    replace(from, to, slice) {
      return replace(this.resolve(from), this.resolve(to), slice);
    }
    /**
    Find the node directly after the given position.
    */
    nodeAt(pos) {
      for (let node = this; ; ) {
        let { index, offset } = node.content.findIndex(pos);
        node = node.maybeChild(index);
        if (!node) return null;
        if (offset == pos || node.isText) return node;
        pos -= offset + 1;
      }
    }
    /**
    Find the (direct) child node after the given offset, if any,
    and return it along with its index and offset relative to this
    node.
    */
    childAfter(pos) {
      let { index, offset } = this.content.findIndex(pos);
      return { node: this.content.maybeChild(index), index, offset };
    }
    /**
    Find the (direct) child node before the given offset, if any,
    and return it along with its index and offset relative to this
    node.
    */
    childBefore(pos) {
      if (pos == 0) return { node: null, index: 0, offset: 0 };
      let { index, offset } = this.content.findIndex(pos);
      if (offset < pos)
        return { node: this.content.child(index), index, offset };
      let node = this.content.child(index - 1);
      return { node, index: index - 1, offset: offset - node.nodeSize };
    }
    /**
    Resolve the given position in the document, returning an
    [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
    */
    resolve(pos) {
      return ResolvedPos.resolveCached(this, pos);
    }
    /**
    @internal
    */
    resolveNoCache(pos) {
      return ResolvedPos.resolve(this, pos);
    }
    /**
    Test whether a given mark or mark type occurs in this document
    between the two given positions.
    */
    rangeHasMark(from, to, type) {
      let found2 = false;
      if (to > from)
        this.nodesBetween(from, to, (node) => {
          if (type.isInSet(node.marks)) found2 = true;
          return !found2;
        });
      return found2;
    }
    /**
    True when this is a block (non-inline node)
    */
    get isBlock() {
      return this.type.isBlock;
    }
    /**
    True when this is a textblock node, a block node with inline
    content.
    */
    get isTextblock() {
      return this.type.isTextblock;
    }
    /**
    True when this node allows inline content.
    */
    get inlineContent() {
      return this.type.inlineContent;
    }
    /**
    True when this is an inline node (a text node or a node that can
    appear among text).
    */
    get isInline() {
      return this.type.isInline;
    }
    /**
    True when this is a text node.
    */
    get isText() {
      return this.type.isText;
    }
    /**
    True when this is a leaf node.
    */
    get isLeaf() {
      return this.type.isLeaf;
    }
    /**
    True when this is an atom, i.e. when it does not have directly
    editable content. This is usually the same as `isLeaf`, but can
    be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
    on a node's spec (typically used when the node is displayed as
    an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
    */
    get isAtom() {
      return this.type.isAtom;
    }
    /**
    Return a string representation of this node for debugging
    purposes.
    */
    toString() {
      if (this.type.spec.toDebugString)
        return this.type.spec.toDebugString(this);
      let name = this.type.name;
      if (this.content.size) name += "(" + this.content.toStringInner() + ")";
      return wrapMarks(this.marks, name);
    }
    /**
    Get the content match in this node at the given index.
    */
    contentMatchAt(index) {
      let match = this.type.contentMatch.matchFragment(this.content, 0, index);
      if (!match)
        throw new Error("Called contentMatchAt on a node with invalid content");
      return match;
    }
    /**
    Test whether replacing the range between `from` and `to` (by
    child index) with the given replacement fragment (which defaults
    to the empty fragment) would leave the node's content valid. You
    can optionally pass `start` and `end` indices into the
    replacement fragment.
    */
    canReplace(
      from,
      to,
      replacement = Fragment.empty,
      start = 0,
      end = replacement.childCount
    ) {
      let one = this.contentMatchAt(from).matchFragment(
        replacement,
        start,
        end
      );
      let two = one && one.matchFragment(this.content, to);
      if (!two || !two.validEnd) return false;
      for (let i = start; i < end; i++)
        if (!this.type.allowsMarks(replacement.child(i).marks)) return false;
      return true;
    }
    /**
    Test whether replacing the range `from` to `to` (by index) with
    a node of the given type would leave the node's content valid.
    */
    canReplaceWith(from, to, type, marks) {
      if (marks && !this.type.allowsMarks(marks)) return false;
      let start = this.contentMatchAt(from).matchType(type);
      let end = start && start.matchFragment(this.content, to);
      return end ? end.validEnd : false;
    }
    /**
    Test whether the given node's content could be appended to this
    node. If that node is empty, this will only return true if there
    is at least one node type that can appear in both nodes (to avoid
    merging completely incompatible nodes).
    */
    canAppend(other) {
      if (other.content.size)
        return this.canReplace(this.childCount, this.childCount, other.content);
      else return this.type.compatibleContent(other.type);
    }
    /**
    Check whether this node and its descendants conform to the
    schema, and raise error when they do not.
    */
    check() {
      this.type.checkContent(this.content);
      let copy2 = Mark.none;
      for (let i = 0; i < this.marks.length; i++)
        copy2 = this.marks[i].addToSet(copy2);
      if (!Mark.sameSet(copy2, this.marks))
        throw new RangeError(
          `Invalid collection of marks for node ${
            this.type.name
          }: ${this.marks.map((m) => m.type.name)}`
        );
      this.content.forEach((node) => node.check());
    }
    /**
    Return a JSON-serializeable representation of this node.
    */
    toJSON() {
      let obj = { type: this.type.name };
      for (let _ in this.attrs) {
        obj.attrs = this.attrs;
        break;
      }
      if (this.content.size) obj.content = this.content.toJSON();
      if (this.marks.length) obj.marks = this.marks.map((n) => n.toJSON());
      return obj;
    }
    /**
    Deserialize a node from its JSON representation.
    */
    static fromJSON(schema, json) {
      if (!json) throw new RangeError("Invalid input for Node.fromJSON");
      let marks = null;
      if (json.marks) {
        if (!Array.isArray(json.marks))
          throw new RangeError("Invalid mark data for Node.fromJSON");
        marks = json.marks.map(schema.markFromJSON);
      }
      if (json.type == "text") {
        if (typeof json.text != "string")
          throw new RangeError("Invalid text node in JSON");
        return schema.text(json.text, marks);
      }
      let content = Fragment.fromJSON(schema, json.content);
      return schema.nodeType(json.type).create(json.attrs, content, marks);
    }
  };
  Node.prototype.text = void 0;
  function wrapMarks(marks, str) {
    for (let i = marks.length - 1; i >= 0; i--)
      str = marks[i].type.name + "(" + str + ")";
    return str;
  }
  var ContentMatch = class _ContentMatch {
    /**
    @internal
    */
    constructor(validEnd) {
      this.validEnd = validEnd;
      this.next = [];
      this.wrapCache = [];
    }
    /**
    @internal
    */
    static parse(string, nodeTypes) {
      let stream = new TokenStream(string, nodeTypes);
      if (stream.next == null) return _ContentMatch.empty;
      let expr = parseExpr(stream);
      if (stream.next) stream.err("Unexpected trailing text");
      let match = dfa(nfa(expr));
      checkForDeadEnds(match, stream);
      return match;
    }
    /**
    Match a node type, returning a match after that node if
    successful.
    */
    matchType(type) {
      for (let i = 0; i < this.next.length; i++)
        if (this.next[i].type == type) return this.next[i].next;
      return null;
    }
    /**
    Try to match a fragment. Returns the resulting match when
    successful.
    */
    matchFragment(frag, start = 0, end = frag.childCount) {
      let cur = this;
      for (let i = start; cur && i < end; i++)
        cur = cur.matchType(frag.child(i).type);
      return cur;
    }
    /**
    @internal
    */
    get inlineContent() {
      return this.next.length != 0 && this.next[0].type.isInline;
    }
    /**
    Get the first matching node type at this match position that can
    be generated.
    */
    get defaultType() {
      for (let i = 0; i < this.next.length; i++) {
        let { type } = this.next[i];
        if (!(type.isText || type.hasRequiredAttrs())) return type;
      }
      return null;
    }
    /**
    @internal
    */
    compatible(other) {
      for (let i = 0; i < this.next.length; i++)
        for (let j = 0; j < other.next.length; j++)
          if (this.next[i].type == other.next[j].type) return true;
      return false;
    }
    /**
    Try to match the given fragment, and if that fails, see if it can
    be made to match by inserting nodes in front of it. When
    successful, return a fragment of inserted nodes (which may be
    empty if nothing had to be inserted). When `toEnd` is true, only
    return a fragment if the resulting match goes to the end of the
    content expression.
    */
    fillBefore(after, toEnd = false, startIndex = 0) {
      let seen = [this];
      function search(match, types) {
        let finished = match.matchFragment(after, startIndex);
        if (finished && (!toEnd || finished.validEnd))
          return Fragment.from(types.map((tp) => tp.createAndFill()));
        for (let i = 0; i < match.next.length; i++) {
          let { type, next } = match.next[i];
          if (
            !(type.isText || type.hasRequiredAttrs()) &&
            seen.indexOf(next) == -1
          ) {
            seen.push(next);
            let found2 = search(next, types.concat(type));
            if (found2) return found2;
          }
        }
        return null;
      }
      return search(this, []);
    }
    /**
    Find a set of wrapping node types that would allow a node of the
    given type to appear at this position. The result may be empty
    (when it fits directly) and will be null when no such wrapping
    exists.
    */
    findWrapping(target) {
      for (let i = 0; i < this.wrapCache.length; i += 2)
        if (this.wrapCache[i] == target) return this.wrapCache[i + 1];
      let computed = this.computeWrapping(target);
      this.wrapCache.push(target, computed);
      return computed;
    }
    /**
    @internal
    */
    computeWrapping(target) {
      let seen = /* @__PURE__ */ Object.create(null),
        active = [{ match: this, type: null, via: null }];
      while (active.length) {
        let current = active.shift(),
          match = current.match;
        if (match.matchType(target)) {
          let result = [];
          for (let obj = current; obj.type; obj = obj.via)
            result.push(obj.type);
          return result.reverse();
        }
        for (let i = 0; i < match.next.length; i++) {
          let { type, next } = match.next[i];
          if (
            !type.isLeaf &&
            !type.hasRequiredAttrs() &&
            !(type.name in seen) &&
            (!current.type || next.validEnd)
          ) {
            active.push({ match: type.contentMatch, type, via: current });
            seen[type.name] = true;
          }
        }
      }
      return null;
    }
    /**
    The number of outgoing edges this node has in the finite
    automaton that describes the content expression.
    */
    get edgeCount() {
      return this.next.length;
    }
    /**
    Get the _n_​th outgoing edge from this node in the finite
    automaton that describes the content expression.
    */
    edge(n) {
      if (n >= this.next.length)
        throw new RangeError(`There's no ${n}th edge in this content match`);
      return this.next[n];
    }
    /**
    @internal
    */
    toString() {
      let seen = [];
      function scan(m) {
        seen.push(m);
        for (let i = 0; i < m.next.length; i++)
          if (seen.indexOf(m.next[i].next) == -1) scan(m.next[i].next);
      }
      scan(this);
      return seen
        .map((m, i) => {
          let out = i + (m.validEnd ? "*" : " ") + " ";
          for (let i2 = 0; i2 < m.next.length; i2++)
            out +=
              (i2 ? ", " : "") +
              m.next[i2].type.name +
              "->" +
              seen.indexOf(m.next[i2].next);
          return out;
        })
        .join("\n");
    }
  };
  ContentMatch.empty = new ContentMatch(true);
  var TokenStream = class {
    constructor(string, nodeTypes) {
      this.string = string;
      this.nodeTypes = nodeTypes;
      this.inline = null;
      this.pos = 0;
      this.tokens = string.split(/\s*(?=\b|\W|$)/);
      if (this.tokens[this.tokens.length - 1] == "") this.tokens.pop();
      if (this.tokens[0] == "") this.tokens.shift();
    }
    get next() {
      return this.tokens[this.pos];
    }
    eat(tok) {
      return this.next == tok && (this.pos++ || true);
    }
    err(str) {
      throw new SyntaxError(
        str + " (in content expression '" + this.string + "')"
      );
    }
  };
  function parseExpr(stream) {
    let exprs = [];
    do {
      exprs.push(parseExprSeq(stream));
    } while (stream.eat("|"));
    return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
  }
  function parseExprSeq(stream) {
    let exprs = [];
    do {
      exprs.push(parseExprSubscript(stream));
    } while (stream.next && stream.next != ")" && stream.next != "|");
    return exprs.length == 1 ? exprs[0] : { type: "seq", exprs };
  }
  function parseExprSubscript(stream) {
    let expr = parseExprAtom(stream);
    for (;;) {
      if (stream.eat("+")) expr = { type: "plus", expr };
      else if (stream.eat("*")) expr = { type: "star", expr };
      else if (stream.eat("?")) expr = { type: "opt", expr };
      else if (stream.eat("{")) expr = parseExprRange(stream, expr);
      else break;
    }
    return expr;
  }
  function parseNum(stream) {
    if (/\D/.test(stream.next))
      stream.err("Expected number, got '" + stream.next + "'");
    let result = Number(stream.next);
    stream.pos++;
    return result;
  }
  function parseExprRange(stream, expr) {
    let min = parseNum(stream),
      max = min;
    if (stream.eat(",")) {
      if (stream.next != "}") max = parseNum(stream);
      else max = -1;
    }
    if (!stream.eat("}")) stream.err("Unclosed braced range");
    return { type: "range", min, max, expr };
  }
  function resolveName(stream, name) {
    let types = stream.nodeTypes,
      type = types[name];
    if (type) return [type];
    let result = [];
    for (let typeName in types) {
      let type2 = types[typeName];
      if (type2.groups.indexOf(name) > -1) result.push(type2);
    }
    if (result.length == 0)
      stream.err("No node type or group '" + name + "' found");
    return result;
  }
  function parseExprAtom(stream) {
    if (stream.eat("(")) {
      let expr = parseExpr(stream);
      if (!stream.eat(")")) stream.err("Missing closing paren");
      return expr;
    } else if (!/\W/.test(stream.next)) {
      let exprs = resolveName(stream, stream.next).map((type) => {
        if (stream.inline == null) stream.inline = type.isInline;
        else if (stream.inline != type.isInline)
          stream.err("Mixing inline and block content");
        return { type: "name", value: type };
      });
      stream.pos++;
      return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
    } else {
      stream.err("Unexpected token '" + stream.next + "'");
    }
  }
  function nfa(expr) {
    let nfa2 = [[]];
    connect(compile(expr, 0), node());
    return nfa2;
    function node() {
      return nfa2.push([]) - 1;
    }
    function edge(from, to, term) {
      let edge2 = { term, to };
      nfa2[from].push(edge2);
      return edge2;
    }
    function connect(edges, to) {
      edges.forEach((edge2) => (edge2.to = to));
    }
    function compile(expr2, from) {
      if (expr2.type == "choice") {
        return expr2.exprs.reduce(
          (out, expr3) => out.concat(compile(expr3, from)),
          []
        );
      } else if (expr2.type == "seq") {
        for (let i = 0; ; i++) {
          let next = compile(expr2.exprs[i], from);
          if (i == expr2.exprs.length - 1) return next;
          connect(next, (from = node()));
        }
      } else if (expr2.type == "star") {
        let loop = node();
        edge(from, loop);
        connect(compile(expr2.expr, loop), loop);
        return [edge(loop)];
      } else if (expr2.type == "plus") {
        let loop = node();
        connect(compile(expr2.expr, from), loop);
        connect(compile(expr2.expr, loop), loop);
        return [edge(loop)];
      } else if (expr2.type == "opt") {
        return [edge(from)].concat(compile(expr2.expr, from));
      } else if (expr2.type == "range") {
        let cur = from;
        for (let i = 0; i < expr2.min; i++) {
          let next = node();
          connect(compile(expr2.expr, cur), next);
          cur = next;
        }
        if (expr2.max == -1) {
          connect(compile(expr2.expr, cur), cur);
        } else {
          for (let i = expr2.min; i < expr2.max; i++) {
            let next = node();
            edge(cur, next);
            connect(compile(expr2.expr, cur), next);
            cur = next;
          }
        }
        return [edge(cur)];
      } else if (expr2.type == "name") {
        return [edge(from, void 0, expr2.value)];
      } else {
        throw new Error("Unknown expr type");
      }
    }
  }
  function cmp(a, b) {
    return b - a;
  }
  function nullFrom(nfa2, node) {
    let result = [];
    scan(node);
    return result.sort(cmp);
    function scan(node2) {
      let edges = nfa2[node2];
      if (edges.length == 1 && !edges[0].term) return scan(edges[0].to);
      result.push(node2);
      for (let i = 0; i < edges.length; i++) {
        let { term, to } = edges[i];
        if (!term && result.indexOf(to) == -1) scan(to);
      }
    }
  }
  function dfa(nfa2) {
    let labeled = /* @__PURE__ */ Object.create(null);
    return explore(nullFrom(nfa2, 0));
    function explore(states) {
      let out = [];
      states.forEach((node) => {
        nfa2[node].forEach(({ term, to }) => {
          if (!term) return;
          let set;
          for (let i = 0; i < out.length; i++)
            if (out[i][0] == term) set = out[i][1];
          nullFrom(nfa2, to).forEach((node2) => {
            if (!set) out.push([term, (set = [])]);
            if (set.indexOf(node2) == -1) set.push(node2);
          });
        });
      });
      let state = (labeled[states.join(",")] = new ContentMatch(
        states.indexOf(nfa2.length - 1) > -1
      ));
      for (let i = 0; i < out.length; i++) {
        let states2 = out[i][1].sort(cmp);
        state.next.push({
          type: out[i][0],
          next: labeled[states2.join(",")] || explore(states2),
        });
      }
      return state;
    }
  }
  function checkForDeadEnds(match, stream) {
    for (let i = 0, work = [match]; i < work.length; i++) {
      let state = work[i],
        dead = !state.validEnd,
        nodes = [];
      for (let j = 0; j < state.next.length; j++) {
        let { type, next } = state.next[j];
        nodes.push(type.name);
        if (dead && !(type.isText || type.hasRequiredAttrs())) dead = false;
        if (work.indexOf(next) == -1) work.push(next);
      }
      if (dead)
        stream.err(
          "Only non-generatable nodes (" +
            nodes.join(", ") +
            ") in a required position (see https://prosemirror.net/docs/guide/#generatable)"
        );
    }
  }
  var DOMParser = class _DOMParser {
    /**
    Create a parser that targets the given schema, using the given
    parsing rules.
    */
    constructor(schema, rules) {
      this.schema = schema;
      this.rules = rules;
      this.tags = [];
      this.styles = [];
      rules.forEach((rule) => {
        if (rule.tag) this.tags.push(rule);
        else if (rule.style) this.styles.push(rule);
      });
      this.normalizeLists = !this.tags.some((r) => {
        if (!/^(ul|ol)\b/.test(r.tag) || !r.node) return false;
        let node = schema.nodes[r.node];
        return node.contentMatch.matchType(node);
      });
    }
    /**
    Parse a document from the content of a DOM node.
    */
    parse(dom, options = {}) {
      let context = new ParseContext(this, options, false);
      context.addAll(dom, options.from, options.to);
      return context.finish();
    }
    /**
    Parses the content of the given DOM node, like
    [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
    options. But unlike that method, which produces a whole node,
    this one returns a slice that is open at the sides, meaning that
    the schema constraints aren't applied to the start of nodes to
    the left of the input and the end of nodes at the end.
    */
    parseSlice(dom, options = {}) {
      let context = new ParseContext(this, options, true);
      context.addAll(dom, options.from, options.to);
      return Slice.maxOpen(context.finish());
    }
    /**
    @internal
    */
    matchTag(dom, context, after) {
      for (
        let i = after ? this.tags.indexOf(after) + 1 : 0;
        i < this.tags.length;
        i++
      ) {
        let rule = this.tags[i];
        if (
          matches(dom, rule.tag) &&
          (rule.namespace === void 0 || dom.namespaceURI == rule.namespace) &&
          (!rule.context || context.matchesContext(rule.context))
        ) {
          if (rule.getAttrs) {
            let result = rule.getAttrs(dom);
            if (result === false) continue;
            rule.attrs = result || void 0;
          }
          return rule;
        }
      }
    }
    /**
    @internal
    */
    matchStyle(prop, value, context, after) {
      for (
        let i = after ? this.styles.indexOf(after) + 1 : 0;
        i < this.styles.length;
        i++
      ) {
        let rule = this.styles[i],
          style = rule.style;
        if (
          style.indexOf(prop) != 0 ||
          (rule.context && !context.matchesContext(rule.context)) || // Test that the style string either precisely matches the prop,
          // or has an '=' sign after the prop, followed by the given
          // value.
          (style.length > prop.length &&
            (style.charCodeAt(prop.length) != 61 ||
              style.slice(prop.length + 1) != value))
        )
          continue;
        if (rule.getAttrs) {
          let result = rule.getAttrs(value);
          if (result === false) continue;
          rule.attrs = result || void 0;
        }
        return rule;
      }
    }
    /**
    @internal
    */
    static schemaRules(schema) {
      let result = [];
      function insert(rule) {
        let priority = rule.priority == null ? 50 : rule.priority,
          i = 0;
        for (; i < result.length; i++) {
          let next = result[i],
            nextPriority = next.priority == null ? 50 : next.priority;
          if (nextPriority < priority) break;
        }
        result.splice(i, 0, rule);
      }
      for (let name in schema.marks) {
        let rules = schema.marks[name].spec.parseDOM;
        if (rules)
          rules.forEach((rule) => {
            insert((rule = copy(rule)));
            if (!(rule.mark || rule.ignore || rule.clearMark)) rule.mark = name;
          });
      }
      for (let name in schema.nodes) {
        let rules = schema.nodes[name].spec.parseDOM;
        if (rules)
          rules.forEach((rule) => {
            insert((rule = copy(rule)));
            if (!(rule.node || rule.ignore || rule.mark)) rule.node = name;
          });
      }
      return result;
    }
    /**
    Construct a DOM parser using the parsing rules listed in a
    schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
    [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
    */
    static fromSchema(schema) {
      return (
        schema.cached.domParser ||
        (schema.cached.domParser = new _DOMParser(
          schema,
          _DOMParser.schemaRules(schema)
        ))
      );
    }
  };
  var blockTags = {
    address: true,
    article: true,
    aside: true,
    blockquote: true,
    canvas: true,
    dd: true,
    div: true,
    dl: true,
    fieldset: true,
    figcaption: true,
    figure: true,
    footer: true,
    form: true,
    h1: true,
    h2: true,
    h3: true,
    h4: true,
    h5: true,
    h6: true,
    header: true,
    hgroup: true,
    hr: true,
    li: true,
    noscript: true,
    ol: true,
    output: true,
    p: true,
    pre: true,
    section: true,
    table: true,
    tfoot: true,
    ul: true,
  };
  var ignoreTags = {
    head: true,
    noscript: true,
    object: true,
    script: true,
    style: true,
    title: true,
  };
  var listTags = { ol: true, ul: true };
  var OPT_PRESERVE_WS = 1;
  var OPT_PRESERVE_WS_FULL = 2;
  var OPT_OPEN_LEFT = 4;
  function wsOptionsFor(type, preserveWhitespace, base) {
    if (preserveWhitespace != null)
      return (
        (preserveWhitespace ? OPT_PRESERVE_WS : 0) |
        (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0)
      );
    return type && type.whitespace == "pre"
      ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL
      : base & ~OPT_OPEN_LEFT;
  }
  var NodeContext = class {
    constructor(type, attrs, marks, pendingMarks, solid, match, options) {
      this.type = type;
      this.attrs = attrs;
      this.marks = marks;
      this.pendingMarks = pendingMarks;
      this.solid = solid;
      this.options = options;
      this.content = [];
      this.activeMarks = Mark.none;
      this.stashMarks = [];
      this.match =
        match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);
    }
    findWrapping(node) {
      if (!this.match) {
        if (!this.type) return [];
        let fill = this.type.contentMatch.fillBefore(Fragment.from(node));
        if (fill) {
          this.match = this.type.contentMatch.matchFragment(fill);
        } else {
          let start = this.type.contentMatch,
            wrap;
          if ((wrap = start.findWrapping(node.type))) {
            this.match = start;
            return wrap;
          } else {
            return null;
          }
        }
      }
      return this.match.findWrapping(node.type);
    }
    finish(openEnd) {
      if (!(this.options & OPT_PRESERVE_WS)) {
        let last = this.content[this.content.length - 1],
          m;
        if (last && last.isText && (m = /[ \t\r\n\u000c]+$/.exec(last.text))) {
          let text = last;
          if (last.text.length == m[0].length) this.content.pop();
          else
            this.content[this.content.length - 1] = text.withText(
              text.text.slice(0, text.text.length - m[0].length)
            );
        }
      }
      let content = Fragment.from(this.content);
      if (!openEnd && this.match)
        content = content.append(this.match.fillBefore(Fragment.empty, true));
      return this.type
        ? this.type.create(this.attrs, content, this.marks)
        : content;
    }
    popFromStashMark(mark) {
      for (let i = this.stashMarks.length - 1; i >= 0; i--)
        if (mark.eq(this.stashMarks[i])) return this.stashMarks.splice(i, 1)[0];
    }
    applyPending(nextType) {
      for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {
        let mark = pending[i];
        if (
          (this.type
            ? this.type.allowsMarkType(mark.type)
            : markMayApply(mark.type, nextType)) &&
          !mark.isInSet(this.activeMarks)
        ) {
          this.activeMarks = mark.addToSet(this.activeMarks);
          this.pendingMarks = mark.removeFromSet(this.pendingMarks);
        }
      }
    }
    inlineContext(node) {
      if (this.type) return this.type.inlineContent;
      if (this.content.length) return this.content[0].isInline;
      return (
        node.parentNode &&
        !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase())
      );
    }
  };
  var ParseContext = class {
    constructor(parser, options, isOpen) {
      this.parser = parser;
      this.options = options;
      this.isOpen = isOpen;
      this.open = 0;
      let topNode = options.topNode,
        topContext;
      let topOptions =
        wsOptionsFor(null, options.preserveWhitespace, 0) |
        (isOpen ? OPT_OPEN_LEFT : 0);
      if (topNode)
        topContext = new NodeContext(
          topNode.type,
          topNode.attrs,
          Mark.none,
          Mark.none,
          true,
          options.topMatch || topNode.type.contentMatch,
          topOptions
        );
      else if (isOpen)
        topContext = new NodeContext(
          null,
          null,
          Mark.none,
          Mark.none,
          true,
          null,
          topOptions
        );
      else
        topContext = new NodeContext(
          parser.schema.topNodeType,
          null,
          Mark.none,
          Mark.none,
          true,
          null,
          topOptions
        );
      this.nodes = [topContext];
      this.find = options.findPositions;
      this.needsBlock = false;
    }
    get top() {
      return this.nodes[this.open];
    }
    // Add a DOM node to the content. Text is inserted as text node,
    // otherwise, the node is passed to `addElement` or, if it has a
    // `style` attribute, `addElementWithStyles`.
    addDOM(dom) {
      if (dom.nodeType == 3) this.addTextNode(dom);
      else if (dom.nodeType == 1) this.addElement(dom);
    }
    withStyleRules(dom, f) {
      let style = dom.getAttribute("style");
      if (!style) return f();
      let marks = this.readStyles(parseStyles(style));
      if (!marks) return;
      let [addMarks, removeMarks] = marks,
        top = this.top;
      for (let i = 0; i < removeMarks.length; i++)
        this.removePendingMark(removeMarks[i], top);
      for (let i = 0; i < addMarks.length; i++)
        this.addPendingMark(addMarks[i]);
      f();
      for (let i = 0; i < addMarks.length; i++)
        this.removePendingMark(addMarks[i], top);
      for (let i = 0; i < removeMarks.length; i++)
        this.addPendingMark(removeMarks[i]);
    }
    addTextNode(dom) {
      let value = dom.nodeValue;
      let top = this.top;
      if (
        top.options & OPT_PRESERVE_WS_FULL ||
        top.inlineContext(dom) ||
        /[^ \t\r\n\u000c]/.test(value)
      ) {
        if (!(top.options & OPT_PRESERVE_WS)) {
          value = value.replace(/[ \t\r\n\u000c]+/g, " ");
          if (
            /^[ \t\r\n\u000c]/.test(value) &&
            this.open == this.nodes.length - 1
          ) {
            let nodeBefore = top.content[top.content.length - 1];
            let domNodeBefore = dom.previousSibling;
            if (
              !nodeBefore ||
              (domNodeBefore && domNodeBefore.nodeName == "BR") ||
              (nodeBefore.isText && /[ \t\r\n\u000c]$/.test(nodeBefore.text))
            )
              value = value.slice(1);
          }
        } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {
          value = value.replace(/\r?\n|\r/g, " ");
        } else {
          value = value.replace(/\r\n?/g, "\n");
        }
        if (value) this.insertNode(this.parser.schema.text(value));
        this.findInText(dom);
      } else {
        this.findInside(dom);
      }
    }
    // Try to find a handler for the given tag and use that to parse. If
    // none is found, the element's content nodes are added directly.
    addElement(dom, matchAfter) {
      let name = dom.nodeName.toLowerCase(),
        ruleID;
      if (listTags.hasOwnProperty(name) && this.parser.normalizeLists)
        normalizeList(dom);
      let rule =
        (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||
        (ruleID = this.parser.matchTag(dom, this, matchAfter));
      if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {
        this.findInside(dom);
        this.ignoreFallback(dom);
      } else if (!rule || rule.skip || rule.closeParent) {
        if (rule && rule.closeParent) this.open = Math.max(0, this.open - 1);
        else if (rule && rule.skip.nodeType) dom = rule.skip;
        let sync,
          top = this.top,
          oldNeedsBlock = this.needsBlock;
        if (blockTags.hasOwnProperty(name)) {
          if (top.content.length && top.content[0].isInline && this.open) {
            this.open--;
            top = this.top;
          }
          sync = true;
          if (!top.type) this.needsBlock = true;
        } else if (!dom.firstChild) {
          this.leafFallback(dom);
          return;
        }
        if (rule && rule.skip) this.addAll(dom);
        else this.withStyleRules(dom, () => this.addAll(dom));
        if (sync) this.sync(top);
        this.needsBlock = oldNeedsBlock;
      } else {
        this.withStyleRules(dom, () => {
          this.addElementByRule(
            dom,
            rule,
            rule.consuming === false ? ruleID : void 0
          );
        });
      }
    }
    // Called for leaf DOM nodes that would otherwise be ignored
    leafFallback(dom) {
      if (dom.nodeName == "BR" && this.top.type && this.top.type.inlineContent)
        this.addTextNode(dom.ownerDocument.createTextNode("\n"));
    }
    // Called for ignored nodes
    ignoreFallback(dom) {
      if (
        dom.nodeName == "BR" &&
        (!this.top.type || !this.top.type.inlineContent)
      )
        this.findPlace(this.parser.schema.text("-"));
    }
    // Run any style parser associated with the node's styles. Either
    // return an array of marks, or null to indicate some of the styles
    // had a rule with `ignore` set.
    readStyles(styles) {
      let add = Mark.none,
        remove = Mark.none;
      for (let i = 0; i < styles.length; i += 2) {
        for (let after = void 0; ; ) {
          let rule = this.parser.matchStyle(
            styles[i],
            styles[i + 1],
            this,
            after
          );
          if (!rule) break;
          if (rule.ignore) return null;
          if (rule.clearMark) {
            this.top.pendingMarks.concat(this.top.activeMarks).forEach((m) => {
              if (rule.clearMark(m)) remove = m.addToSet(remove);
            });
          } else {
            add = this.parser.schema.marks[rule.mark]
              .create(rule.attrs)
              .addToSet(add);
          }
          if (rule.consuming === false) after = rule;
          else break;
        }
      }
      return [add, remove];
    }
    // Look up a handler for the given node. If none are found, return
    // false. Otherwise, apply it, use its return value to drive the way
    // the node's content is wrapped, and return true.
    addElementByRule(dom, rule, continueAfter) {
      let sync, nodeType, mark;
      if (rule.node) {
        nodeType = this.parser.schema.nodes[rule.node];
        if (!nodeType.isLeaf) {
          sync = this.enter(
            nodeType,
            rule.attrs || null,
            rule.preserveWhitespace
          );
        } else if (!this.insertNode(nodeType.create(rule.attrs))) {
          this.leafFallback(dom);
        }
      } else {
        let markType = this.parser.schema.marks[rule.mark];
        mark = markType.create(rule.attrs);
        this.addPendingMark(mark);
      }
      let startIn = this.top;
      if (nodeType && nodeType.isLeaf) {
        this.findInside(dom);
      } else if (continueAfter) {
        this.addElement(dom, continueAfter);
      } else if (rule.getContent) {
        this.findInside(dom);
        rule
          .getContent(dom, this.parser.schema)
          .forEach((node) => this.insertNode(node));
      } else {
        let contentDOM = dom;
        if (typeof rule.contentElement == "string")
          contentDOM = dom.querySelector(rule.contentElement);
        else if (typeof rule.contentElement == "function")
          contentDOM = rule.contentElement(dom);
        else if (rule.contentElement) contentDOM = rule.contentElement;
        this.findAround(dom, contentDOM, true);
        this.addAll(contentDOM);
      }
      if (sync && this.sync(startIn)) this.open--;
      if (mark) this.removePendingMark(mark, startIn);
    }
    // Add all child nodes between `startIndex` and `endIndex` (or the
    // whole node, if not given). If `sync` is passed, use it to
    // synchronize after every block element.
    addAll(parent, startIndex, endIndex) {
      let index = startIndex || 0;
      for (
        let dom = startIndex
            ? parent.childNodes[startIndex]
            : parent.firstChild,
          end = endIndex == null ? null : parent.childNodes[endIndex];
        dom != end;
        dom = dom.nextSibling, ++index
      ) {
        this.findAtPoint(parent, index);
        this.addDOM(dom);
      }
      this.findAtPoint(parent, index);
    }
    // Try to find a way to fit the given node type into the current
    // context. May add intermediate wrappers and/or leave non-solid
    // nodes that we're in.
    findPlace(node) {
      let route, sync;
      for (let depth = this.open; depth >= 0; depth--) {
        let cx = this.nodes[depth];
        let found2 = cx.findWrapping(node);
        if (found2 && (!route || route.length > found2.length)) {
          route = found2;
          sync = cx;
          if (!found2.length) break;
        }
        if (cx.solid) break;
      }
      if (!route) return false;
      this.sync(sync);
      for (let i = 0; i < route.length; i++)
        this.enterInner(route[i], null, false);
      return true;
    }
    // Try to insert the given node, adjusting the context when needed.
    insertNode(node) {
      if (node.isInline && this.needsBlock && !this.top.type) {
        let block = this.textblockFromContext();
        if (block) this.enterInner(block);
      }
      if (this.findPlace(node)) {
        this.closeExtra();
        let top = this.top;
        top.applyPending(node.type);
        if (top.match) top.match = top.match.matchType(node.type);
        let marks = top.activeMarks;
        for (let i = 0; i < node.marks.length; i++)
          if (!top.type || top.type.allowsMarkType(node.marks[i].type))
            marks = node.marks[i].addToSet(marks);
        top.content.push(node.mark(marks));
        return true;
      }
      return false;
    }
    // Try to start a node of the given type, adjusting the context when
    // necessary.
    enter(type, attrs, preserveWS) {
      let ok = this.findPlace(type.create(attrs));
      if (ok) this.enterInner(type, attrs, true, preserveWS);
      return ok;
    }
    // Open a node of the given type
    enterInner(type, attrs = null, solid = false, preserveWS) {
      this.closeExtra();
      let top = this.top;
      top.applyPending(type);
      top.match = top.match && top.match.matchType(type);
      let options = wsOptionsFor(type, preserveWS, top.options);
      if (top.options & OPT_OPEN_LEFT && top.content.length == 0)
        options |= OPT_OPEN_LEFT;
      this.nodes.push(
        new NodeContext(
          type,
          attrs,
          top.activeMarks,
          top.pendingMarks,
          solid,
          null,
          options
        )
      );
      this.open++;
    }
    // Make sure all nodes above this.open are finished and added to
    // their parents
    closeExtra(openEnd = false) {
      let i = this.nodes.length - 1;
      if (i > this.open) {
        for (; i > this.open; i--)
          this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));
        this.nodes.length = this.open + 1;
      }
    }
    finish() {
      this.open = 0;
      this.closeExtra(this.isOpen);
      return this.nodes[0].finish(this.isOpen || this.options.topOpen);
    }
    sync(to) {
      for (let i = this.open; i >= 0; i--)
        if (this.nodes[i] == to) {
          this.open = i;
          return true;
        }
      return false;
    }
    get currentPos() {
      this.closeExtra();
      let pos = 0;
      for (let i = this.open; i >= 0; i--) {
        let content = this.nodes[i].content;
        for (let j = content.length - 1; j >= 0; j--)
          pos += content[j].nodeSize;
        if (i) pos++;
      }
      return pos;
    }
    findAtPoint(parent, offset) {
      if (this.find)
        for (let i = 0; i < this.find.length; i++) {
          if (this.find[i].node == parent && this.find[i].offset == offset)
            this.find[i].pos = this.currentPos;
        }
    }
    findInside(parent) {
      if (this.find)
        for (let i = 0; i < this.find.length; i++) {
          if (
            this.find[i].pos == null &&
            parent.nodeType == 1 &&
            parent.contains(this.find[i].node)
          )
            this.find[i].pos = this.currentPos;
        }
    }
    findAround(parent, content, before) {
      if (parent != content && this.find)
        for (let i = 0; i < this.find.length; i++) {
          if (
            this.find[i].pos == null &&
            parent.nodeType == 1 &&
            parent.contains(this.find[i].node)
          ) {
            let pos = content.compareDocumentPosition(this.find[i].node);
            if (pos & (before ? 2 : 4)) this.find[i].pos = this.currentPos;
          }
        }
    }
    findInText(textNode) {
      if (this.find)
        for (let i = 0; i < this.find.length; i++) {
          if (this.find[i].node == textNode)
            this.find[i].pos =
              this.currentPos -
              (textNode.nodeValue.length - this.find[i].offset);
        }
    }
    // Determines whether the given context string matches this context.
    matchesContext(context) {
      if (context.indexOf("|") > -1)
        return context.split(/\s*\|\s*/).some(this.matchesContext, this);
      let parts = context.split("/");
      let option = this.options.context;
      let useRoot =
        !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
      let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
      let match = (i, depth) => {
        for (; i >= 0; i--) {
          let part = parts[i];
          if (part == "") {
            if (i == parts.length - 1 || i == 0) continue;
            for (; depth >= minDepth; depth--)
              if (match(i - 1, depth)) return true;
            return false;
          } else {
            let next =
              depth > 0 || (depth == 0 && useRoot)
                ? this.nodes[depth].type
                : option && depth >= minDepth
                ? option.node(depth - minDepth).type
                : null;
            if (!next || (next.name != part && next.groups.indexOf(part) == -1))
              return false;
            depth--;
          }
        }
        return true;
      };
      return match(parts.length - 1, this.open);
    }
    textblockFromContext() {
      let $context = this.options.context;
      if ($context)
        for (let d = $context.depth; d >= 0; d--) {
          let deflt = $context
            .node(d)
            .contentMatchAt($context.indexAfter(d)).defaultType;
          if (deflt && deflt.isTextblock && deflt.defaultAttrs) return deflt;
        }
      for (let name in this.parser.schema.nodes) {
        let type = this.parser.schema.nodes[name];
        if (type.isTextblock && type.defaultAttrs) return type;
      }
    }
    addPendingMark(mark) {
      let found2 = findSameMarkInSet(mark, this.top.pendingMarks);
      if (found2) this.top.stashMarks.push(found2);
      this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);
    }
    removePendingMark(mark, upto) {
      for (let depth = this.open; depth >= 0; depth--) {
        let level = this.nodes[depth];
        let found2 = level.pendingMarks.lastIndexOf(mark);
        if (found2 > -1) {
          level.pendingMarks = mark.removeFromSet(level.pendingMarks);
        } else {
          level.activeMarks = mark.removeFromSet(level.activeMarks);
          let stashMark = level.popFromStashMark(mark);
          if (
            stashMark &&
            level.type &&
            level.type.allowsMarkType(stashMark.type)
          )
            level.activeMarks = stashMark.addToSet(level.activeMarks);
        }
        if (level == upto) break;
      }
    }
  };
  function normalizeList(dom) {
    for (
      let child = dom.firstChild, prevItem = null;
      child;
      child = child.nextSibling
    ) {
      let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
      if (name && listTags.hasOwnProperty(name) && prevItem) {
        prevItem.appendChild(child);
        child = prevItem;
      } else if (name == "li") {
        prevItem = child;
      } else if (name) {
        prevItem = null;
      }
    }
  }
  function matches(dom, selector) {
    return (
      dom.matches ||
      dom.msMatchesSelector ||
      dom.webkitMatchesSelector ||
      dom.mozMatchesSelector
    ).call(dom, selector);
  }
  function parseStyles(style) {
    let re = /\s*([\w-]+)\s*:\s*([^;]+)/g,
      m,
      result = [];
    while ((m = re.exec(style))) result.push(m[1], m[2].trim());
    return result;
  }
  function copy(obj) {
    let copy2 = {};
    for (let prop in obj) copy2[prop] = obj[prop];
    return copy2;
  }
  function markMayApply(markType, nodeType) {
    let nodes = nodeType.schema.nodes;
    for (let name in nodes) {
      let parent = nodes[name];
      if (!parent.allowsMarkType(markType)) continue;
      let seen = [],
        scan = (match) => {
          seen.push(match);
          for (let i = 0; i < match.edgeCount; i++) {
            let { type, next } = match.edge(i);
            if (type == nodeType) return true;
            if (seen.indexOf(next) < 0 && scan(next)) return true;
          }
        };
      if (scan(parent.contentMatch)) return true;
    }
  }
  function findSameMarkInSet(mark, set) {
    for (let i = 0; i < set.length; i++) {
      if (mark.eq(set[i])) return set[i];
    }
  }

  // node_modules/prosemirror-transform/dist/index.js
  var lower16 = 65535;
  var factor16 = Math.pow(2, 16);
  function makeRecover(index, offset) {
    return index + offset * factor16;
  }
  function recoverIndex(value) {
    return value & lower16;
  }
  function recoverOffset(value) {
    return (value - (value & lower16)) / factor16;
  }
  var DEL_BEFORE = 1;
  var DEL_AFTER = 2;
  var DEL_ACROSS = 4;
  var DEL_SIDE = 8;
  var MapResult = class {
    /**
    @internal
    */
    constructor(pos, delInfo, recover) {
      this.pos = pos;
      this.delInfo = delInfo;
      this.recover = recover;
    }
    /**
    Tells you whether the position was deleted, that is, whether the
    step removed the token on the side queried (via the `assoc`)
    argument from the document.
    */
    get deleted() {
      return (this.delInfo & DEL_SIDE) > 0;
    }
    /**
    Tells you whether the token before the mapped position was deleted.
    */
    get deletedBefore() {
      return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0;
    }
    /**
    True when the token after the mapped position was deleted.
    */
    get deletedAfter() {
      return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0;
    }
    /**
    Tells whether any of the steps mapped through deletes across the
    position (including both the token before and after the
    position).
    */
    get deletedAcross() {
      return (this.delInfo & DEL_ACROSS) > 0;
    }
  };
  var StepMap = class _StepMap {
    /**
    Create a position map. The modifications to the document are
    represented as an array of numbers, in which each group of three
    represents a modified chunk as `[start, oldSize, newSize]`.
    */
    constructor(ranges, inverted = false) {
      this.ranges = ranges;
      this.inverted = inverted;
      if (!ranges.length && _StepMap.empty) return _StepMap.empty;
    }
    /**
    @internal
    */
    recover(value) {
      let diff = 0,
        index = recoverIndex(value);
      if (!this.inverted)
        for (let i = 0; i < index; i++)
          diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
      return this.ranges[index * 3] + diff + recoverOffset(value);
    }
    mapResult(pos, assoc = 1) {
      return this._map(pos, assoc, false);
    }
    map(pos, assoc = 1) {
      return this._map(pos, assoc, true);
    }
    /**
    @internal
    */
    _map(pos, assoc, simple) {
      let diff = 0,
        oldIndex = this.inverted ? 2 : 1,
        newIndex = this.inverted ? 1 : 2;
      for (let i = 0; i < this.ranges.length; i += 3) {
        let start = this.ranges[i] - (this.inverted ? diff : 0);
        if (start > pos) break;
        let oldSize = this.ranges[i + oldIndex],
          newSize = this.ranges[i + newIndex],
          end = start + oldSize;
        if (pos <= end) {
          let side = !oldSize
            ? assoc
            : pos == start
            ? -1
            : pos == end
            ? 1
            : assoc;
          let result = start + diff + (side < 0 ? 0 : newSize);
          if (simple) return result;
          let recover =
            pos == (assoc < 0 ? start : end)
              ? null
              : makeRecover(i / 3, pos - start);
          let del2 =
            pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;
          if (assoc < 0 ? pos != start : pos != end) del2 |= DEL_SIDE;
          return new MapResult(result, del2, recover);
        }
        diff += newSize - oldSize;
      }
      return simple ? pos + diff : new MapResult(pos + diff, 0, null);
    }
    /**
    @internal
    */
    touches(pos, recover) {
      let diff = 0,
        index = recoverIndex(recover);
      let oldIndex = this.inverted ? 2 : 1,
        newIndex = this.inverted ? 1 : 2;
      for (let i = 0; i < this.ranges.length; i += 3) {
        let start = this.ranges[i] - (this.inverted ? diff : 0);
        if (start > pos) break;
        let oldSize = this.ranges[i + oldIndex],
          end = start + oldSize;
        if (pos <= end && i == index * 3) return true;
        diff += this.ranges[i + newIndex] - oldSize;
      }
      return false;
    }
    /**
    Calls the given function on each of the changed ranges included in
    this map.
    */
    forEach(f) {
      let oldIndex = this.inverted ? 2 : 1,
        newIndex = this.inverted ? 1 : 2;
      for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {
        let start = this.ranges[i],
          oldStart = start - (this.inverted ? diff : 0),
          newStart = start + (this.inverted ? 0 : diff);
        let oldSize = this.ranges[i + oldIndex],
          newSize = this.ranges[i + newIndex];
        f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
        diff += newSize - oldSize;
      }
    }
    /**
    Create an inverted version of this map. The result can be used to
    map positions in the post-step document to the pre-step document.
    */
    invert() {
      return new _StepMap(this.ranges, !this.inverted);
    }
    /**
    @internal
    */
    toString() {
      return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
    }
    /**
    Create a map that moves all positions by offset `n` (which may be
    negative). This can be useful when applying steps meant for a
    sub-document to a larger document, or vice-versa.
    */
    static offset(n) {
      return n == 0
        ? _StepMap.empty
        : new _StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);
    }
  };
  StepMap.empty = new StepMap([]);
  var stepsByID = /* @__PURE__ */ Object.create(null);
  var Step = class {
    /**
    Get the step map that represents the changes made by this step,
    and which can be used to transform between positions in the old
    and the new document.
    */
    getMap() {
      return StepMap.empty;
    }
    /**
    Try to merge this step with another one, to be applied directly
    after it. Returns the merged step when possible, null if the
    steps can't be merged.
    */
    merge(other) {
      return null;
    }
    /**
    Deserialize a step from its JSON representation. Will call
    through to the step class' own implementation of this method.
    */
    static fromJSON(schema, json) {
      if (!json || !json.stepType)
        throw new RangeError("Invalid input for Step.fromJSON");
      let type = stepsByID[json.stepType];
      if (!type) throw new RangeError(`No step type ${json.stepType} defined`);
      return type.fromJSON(schema, json);
    }
    /**
    To be able to serialize steps to JSON, each step needs a string
    ID to attach to its JSON representation. Use this method to
    register an ID for your step classes. Try to pick something
    that's unlikely to clash with steps from other modules.
    */
    static jsonID(id, stepClass) {
      if (id in stepsByID)
        throw new RangeError("Duplicate use of step JSON ID " + id);
      stepsByID[id] = stepClass;
      stepClass.prototype.jsonID = id;
      return stepClass;
    }
  };
  var StepResult = class _StepResult {
    /**
    @internal
    */
    constructor(doc, failed) {
      this.doc = doc;
      this.failed = failed;
    }
    /**
    Create a successful step result.
    */
    static ok(doc) {
      return new _StepResult(doc, null);
    }
    /**
    Create a failed step result.
    */
    static fail(message) {
      return new _StepResult(null, message);
    }
    /**
    Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
    arguments. Create a successful result if it succeeds, and a
    failed one if it throws a `ReplaceError`.
    */
    static fromReplace(doc, from, to, slice) {
      try {
        return _StepResult.ok(doc.replace(from, to, slice));
      } catch (e) {
        if (e instanceof ReplaceError) return _StepResult.fail(e.message);
        throw e;
      }
    }
  };
  function mapFragment(fragment, f, parent) {
    let mapped = [];
    for (let i = 0; i < fragment.childCount; i++) {
      let child = fragment.child(i);
      if (child.content.size)
        child = child.copy(mapFragment(child.content, f, child));
      if (child.isInline) child = f(child, parent, i);
      mapped.push(child);
    }
    return Fragment.fromArray(mapped);
  }
  var AddMarkStep = class _AddMarkStep extends Step {
    /**
    Create a mark step.
    */
    constructor(from, to, mark) {
      super();
      this.from = from;
      this.to = to;
      this.mark = mark;
    }
    apply(doc) {
      let oldSlice = doc.slice(this.from, this.to),
        $from = doc.resolve(this.from);
      let parent = $from.node($from.sharedDepth(this.to));
      let slice = new Slice(
        mapFragment(
          oldSlice.content,
          (node, parent2) => {
            if (!node.isAtom || !parent2.type.allowsMarkType(this.mark.type))
              return node;
            return node.mark(this.mark.addToSet(node.marks));
          },
          parent
        ),
        oldSlice.openStart,
        oldSlice.openEnd
      );
      return StepResult.fromReplace(doc, this.from, this.to, slice);
    }
    invert() {
      return new RemoveMarkStep(this.from, this.to, this.mark);
    }
    map(mapping) {
      let from = mapping.mapResult(this.from, 1),
        to = mapping.mapResult(this.to, -1);
      if ((from.deleted && to.deleted) || from.pos >= to.pos) return null;
      return new _AddMarkStep(from.pos, to.pos, this.mark);
    }
    merge(other) {
      if (
        other instanceof _AddMarkStep &&
        other.mark.eq(this.mark) &&
        this.from <= other.to &&
        this.to >= other.from
      )
        return new _AddMarkStep(
          Math.min(this.from, other.from),
          Math.max(this.to, other.to),
          this.mark
        );
      return null;
    }
    toJSON() {
      return {
        stepType: "addMark",
        mark: this.mark.toJSON(),
        from: this.from,
        to: this.to,
      };
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
      if (typeof json.from != "number" || typeof json.to != "number")
        throw new RangeError("Invalid input for AddMarkStep.fromJSON");
      return new _AddMarkStep(
        json.from,
        json.to,
        schema.markFromJSON(json.mark)
      );
    }
  };
  Step.jsonID("addMark", AddMarkStep);
  var RemoveMarkStep = class _RemoveMarkStep extends Step {
    /**
    Create a mark-removing step.
    */
    constructor(from, to, mark) {
      super();
      this.from = from;
      this.to = to;
      this.mark = mark;
    }
    apply(doc) {
      let oldSlice = doc.slice(this.from, this.to);
      let slice = new Slice(
        mapFragment(
          oldSlice.content,
          (node) => {
            return node.mark(this.mark.removeFromSet(node.marks));
          },
          doc
        ),
        oldSlice.openStart,
        oldSlice.openEnd
      );
      return StepResult.fromReplace(doc, this.from, this.to, slice);
    }
    invert() {
      return new AddMarkStep(this.from, this.to, this.mark);
    }
    map(mapping) {
      let from = mapping.mapResult(this.from, 1),
        to = mapping.mapResult(this.to, -1);
      if ((from.deleted && to.deleted) || from.pos >= to.pos) return null;
      return new _RemoveMarkStep(from.pos, to.pos, this.mark);
    }
    merge(other) {
      if (
        other instanceof _RemoveMarkStep &&
        other.mark.eq(this.mark) &&
        this.from <= other.to &&
        this.to >= other.from
      )
        return new _RemoveMarkStep(
          Math.min(this.from, other.from),
          Math.max(this.to, other.to),
          this.mark
        );
      return null;
    }
    toJSON() {
      return {
        stepType: "removeMark",
        mark: this.mark.toJSON(),
        from: this.from,
        to: this.to,
      };
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
      if (typeof json.from != "number" || typeof json.to != "number")
        throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
      return new _RemoveMarkStep(
        json.from,
        json.to,
        schema.markFromJSON(json.mark)
      );
    }
  };
  Step.jsonID("removeMark", RemoveMarkStep);
  var AddNodeMarkStep = class _AddNodeMarkStep extends Step {
    /**
    Create a node mark step.
    */
    constructor(pos, mark) {
      super();
      this.pos = pos;
      this.mark = mark;
    }
    apply(doc) {
      let node = doc.nodeAt(this.pos);
      if (!node) return StepResult.fail("No node at mark step's position");
      let updated = node.type.create(
        node.attrs,
        null,
        this.mark.addToSet(node.marks)
      );
      return StepResult.fromReplace(
        doc,
        this.pos,
        this.pos + 1,
        new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1)
      );
    }
    invert(doc) {
      let node = doc.nodeAt(this.pos);
      if (node) {
        let newSet = this.mark.addToSet(node.marks);
        if (newSet.length == node.marks.length) {
          for (let i = 0; i < node.marks.length; i++)
            if (!node.marks[i].isInSet(newSet))
              return new _AddNodeMarkStep(this.pos, node.marks[i]);
          return new _AddNodeMarkStep(this.pos, this.mark);
        }
      }
      return new RemoveNodeMarkStep(this.pos, this.mark);
    }
    map(mapping) {
      let pos = mapping.mapResult(this.pos, 1);
      return pos.deletedAfter ? null : new _AddNodeMarkStep(pos.pos, this.mark);
    }
    toJSON() {
      return {
        stepType: "addNodeMark",
        pos: this.pos,
        mark: this.mark.toJSON(),
      };
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
      if (typeof json.pos != "number")
        throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
      return new _AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
    }
  };
  Step.jsonID("addNodeMark", AddNodeMarkStep);
  var RemoveNodeMarkStep = class _RemoveNodeMarkStep extends Step {
    /**
    Create a mark-removing step.
    */
    constructor(pos, mark) {
      super();
      this.pos = pos;
      this.mark = mark;
    }
    apply(doc) {
      let node = doc.nodeAt(this.pos);
      if (!node) return StepResult.fail("No node at mark step's position");
      let updated = node.type.create(
        node.attrs,
        null,
        this.mark.removeFromSet(node.marks)
      );
      return StepResult.fromReplace(
        doc,
        this.pos,
        this.pos + 1,
        new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1)
      );
    }
    invert(doc) {
      let node = doc.nodeAt(this.pos);
      if (!node || !this.mark.isInSet(node.marks)) return this;
      return new AddNodeMarkStep(this.pos, this.mark);
    }
    map(mapping) {
      let pos = mapping.mapResult(this.pos, 1);
      return pos.deletedAfter
        ? null
        : new _RemoveNodeMarkStep(pos.pos, this.mark);
    }
    toJSON() {
      return {
        stepType: "removeNodeMark",
        pos: this.pos,
        mark: this.mark.toJSON(),
      };
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
      if (typeof json.pos != "number")
        throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
      return new _RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
    }
  };
  Step.jsonID("removeNodeMark", RemoveNodeMarkStep);
  var ReplaceStep = class _ReplaceStep extends Step {
    /**
    The given `slice` should fit the 'gap' between `from` and
    `to`—the depths must line up, and the surrounding nodes must be
    able to be joined with the open sides of the slice. When
    `structure` is true, the step will fail if the content between
    from and to is not just a sequence of closing and then opening
    tokens (this is to guard against rebased replace steps
    overwriting something they weren't supposed to).
    */
    constructor(from, to, slice, structure = false) {
      super();
      this.from = from;
      this.to = to;
      this.slice = slice;
      this.structure = structure;
    }
    apply(doc) {
      if (this.structure && contentBetween(doc, this.from, this.to))
        return StepResult.fail("Structure replace would overwrite content");
      return StepResult.fromReplace(doc, this.from, this.to, this.slice);
    }
    getMap() {
      return new StepMap([this.from, this.to - this.from, this.slice.size]);
    }
    invert(doc) {
      return new _ReplaceStep(
        this.from,
        this.from + this.slice.size,
        doc.slice(this.from, this.to)
      );
    }
    map(mapping) {
      let from = mapping.mapResult(this.from, 1),
        to = mapping.mapResult(this.to, -1);
      if (from.deletedAcross && to.deletedAcross) return null;
      return new _ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);
    }
    merge(other) {
      if (!(other instanceof _ReplaceStep) || other.structure || this.structure)
        return null;
      if (
        this.from + this.slice.size == other.from &&
        !this.slice.openEnd &&
        !other.slice.openStart
      ) {
        let slice =
          this.slice.size + other.slice.size == 0
            ? Slice.empty
            : new Slice(
                this.slice.content.append(other.slice.content),
                this.slice.openStart,
                other.slice.openEnd
              );
        return new _ReplaceStep(
          this.from,
          this.to + (other.to - other.from),
          slice,
          this.structure
        );
      } else if (
        other.to == this.from &&
        !this.slice.openStart &&
        !other.slice.openEnd
      ) {
        let slice =
          this.slice.size + other.slice.size == 0
            ? Slice.empty
            : new Slice(
                other.slice.content.append(this.slice.content),
                other.slice.openStart,
                this.slice.openEnd
              );
        return new _ReplaceStep(other.from, this.to, slice, this.structure);
      } else {
        return null;
      }
    }
    toJSON() {
      let json = { stepType: "replace", from: this.from, to: this.to };
      if (this.slice.size) json.slice = this.slice.toJSON();
      if (this.structure) json.structure = true;
      return json;
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
      if (typeof json.from != "number" || typeof json.to != "number")
        throw new RangeError("Invalid input for ReplaceStep.fromJSON");
      return new _ReplaceStep(
        json.from,
        json.to,
        Slice.fromJSON(schema, json.slice),
        !!json.structure
      );
    }
  };
  Step.jsonID("replace", ReplaceStep);
  var ReplaceAroundStep = class _ReplaceAroundStep extends Step {
    /**
    Create a replace-around step with the given range and gap.
    `insert` should be the point in the slice into which the content
    of the gap should be moved. `structure` has the same meaning as
    it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
    */
    constructor(from, to, gapFrom, gapTo, slice, insert, structure = false) {
      super();
      this.from = from;
      this.to = to;
      this.gapFrom = gapFrom;
      this.gapTo = gapTo;
      this.slice = slice;
      this.insert = insert;
      this.structure = structure;
    }
    apply(doc) {
      if (
        this.structure &&
        (contentBetween(doc, this.from, this.gapFrom) ||
          contentBetween(doc, this.gapTo, this.to))
      )
        return StepResult.fail("Structure gap-replace would overwrite content");
      let gap = doc.slice(this.gapFrom, this.gapTo);
      if (gap.openStart || gap.openEnd)
        return StepResult.fail("Gap is not a flat range");
      let inserted = this.slice.insertAt(this.insert, gap.content);
      if (!inserted) return StepResult.fail("Content does not fit in gap");
      return StepResult.fromReplace(doc, this.from, this.to, inserted);
    }
    getMap() {
      return new StepMap([
        this.from,
        this.gapFrom - this.from,
        this.insert,
        this.gapTo,
        this.to - this.gapTo,
        this.slice.size - this.insert,
      ]);
    }
    invert(doc) {
      let gap = this.gapTo - this.gapFrom;
      return new _ReplaceAroundStep(
        this.from,
        this.from + this.slice.size + gap,
        this.from + this.insert,
        this.from + this.insert + gap,
        doc
          .slice(this.from, this.to)
          .removeBetween(this.gapFrom - this.from, this.gapTo - this.from),
        this.gapFrom - this.from,
        this.structure
      );
    }
    map(mapping) {
      let from = mapping.mapResult(this.from, 1),
        to = mapping.mapResult(this.to, -1);
      let gapFrom = mapping.map(this.gapFrom, -1),
        gapTo = mapping.map(this.gapTo, 1);
      if (
        (from.deletedAcross && to.deletedAcross) ||
        gapFrom < from.pos ||
        gapTo > to.pos
      )
        return null;
      return new _ReplaceAroundStep(
        from.pos,
        to.pos,
        gapFrom,
        gapTo,
        this.slice,
        this.insert,
        this.structure
      );
    }
    toJSON() {
      let json = {
        stepType: "replaceAround",
        from: this.from,
        to: this.to,
        gapFrom: this.gapFrom,
        gapTo: this.gapTo,
        insert: this.insert,
      };
      if (this.slice.size) json.slice = this.slice.toJSON();
      if (this.structure) json.structure = true;
      return json;
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
      if (
        typeof json.from != "number" ||
        typeof json.to != "number" ||
        typeof json.gapFrom != "number" ||
        typeof json.gapTo != "number" ||
        typeof json.insert != "number"
      )
        throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
      return new _ReplaceAroundStep(
        json.from,
        json.to,
        json.gapFrom,
        json.gapTo,
        Slice.fromJSON(schema, json.slice),
        json.insert,
        !!json.structure
      );
    }
  };
  Step.jsonID("replaceAround", ReplaceAroundStep);
  function contentBetween(doc, from, to) {
    let $from = doc.resolve(from),
      dist = to - from,
      depth = $from.depth;
    while (
      dist > 0 &&
      depth > 0 &&
      $from.indexAfter(depth) == $from.node(depth).childCount
    ) {
      depth--;
      dist--;
    }
    if (dist > 0) {
      let next = $from.node(depth).maybeChild($from.indexAfter(depth));
      while (dist > 0) {
        if (!next || next.isLeaf) return true;
        next = next.firstChild;
        dist--;
      }
    }
    return false;
  }
  function canCut(node, start, end) {
    return (
      (start == 0 || node.canReplace(start, node.childCount)) &&
      (end == node.childCount || node.canReplace(0, end))
    );
  }
  function liftTarget(range) {
    let parent = range.parent;
    let content = parent.content.cutByIndex(range.startIndex, range.endIndex);
    for (let depth = range.depth; ; --depth) {
      let node = range.$from.node(depth);
      let index = range.$from.index(depth),
        endIndex = range.$to.indexAfter(depth);
      if (depth < range.depth && node.canReplace(index, endIndex, content))
        return depth;
      if (
        depth == 0 ||
        node.type.spec.isolating ||
        !canCut(node, index, endIndex)
      )
        break;
    }
    return null;
  }
  function findWrapping(range, nodeType, attrs = null, innerRange = range) {
    let around = findWrappingOutside(range, nodeType);
    let inner = around && findWrappingInside(innerRange, nodeType);
    if (!inner) return null;
    return around
      .map(withAttrs)
      .concat({ type: nodeType, attrs })
      .concat(inner.map(withAttrs));
  }
  function withAttrs(type) {
    return { type, attrs: null };
  }
  function findWrappingOutside(range, type) {
    let { parent, startIndex, endIndex } = range;
    let around = parent.contentMatchAt(startIndex).findWrapping(type);
    if (!around) return null;
    let outer = around.length ? around[0] : type;
    return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
  }
  function findWrappingInside(range, type) {
    let { parent, startIndex, endIndex } = range;
    let inner = parent.child(startIndex);
    let inside = type.contentMatch.findWrapping(inner.type);
    if (!inside) return null;
    let lastType = inside.length ? inside[inside.length - 1] : type;
    let innerMatch = lastType.contentMatch;
    for (let i = startIndex; innerMatch && i < endIndex; i++)
      innerMatch = innerMatch.matchType(parent.child(i).type);
    if (!innerMatch || !innerMatch.validEnd) return null;
    return inside;
  }
  function canSplit(doc, pos, depth = 1, typesAfter) {
    let $pos = doc.resolve(pos),
      base = $pos.depth - depth;
    let innerType =
      (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;
    if (
      base < 0 ||
      $pos.parent.type.spec.isolating ||
      !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||
      !innerType.type.validContent(
        $pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)
      )
    )
      return false;
    for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {
      let node = $pos.node(d),
        index2 = $pos.index(d);
      if (node.type.spec.isolating) return false;
      let rest = node.content.cutByIndex(index2, node.childCount);
      let overrideChild = typesAfter && typesAfter[i + 1];
      if (overrideChild)
        rest = rest.replaceChild(
          0,
          overrideChild.type.create(overrideChild.attrs)
        );
      let after = (typesAfter && typesAfter[i]) || node;
      if (
        !node.canReplace(index2 + 1, node.childCount) ||
        !after.type.validContent(rest)
      )
        return false;
    }
    let index = $pos.indexAfter(base);
    let baseType = typesAfter && typesAfter[0];
    return $pos
      .node(base)
      .canReplaceWith(
        index,
        index,
        baseType ? baseType.type : $pos.node(base + 1).type
      );
  }
  function canJoin(doc, pos) {
    let $pos = doc.resolve(pos),
      index = $pos.index();
    return (
      joinable2($pos.nodeBefore, $pos.nodeAfter) &&
      $pos.parent.canReplace(index, index + 1)
    );
  }
  function joinable2(a, b) {
    return !!(a && b && !a.isLeaf && a.canAppend(b));
  }
  function joinPoint(doc, pos, dir = -1) {
    let $pos = doc.resolve(pos);
    for (let d = $pos.depth; ; d--) {
      let before,
        after,
        index = $pos.index(d);
      if (d == $pos.depth) {
        before = $pos.nodeBefore;
        after = $pos.nodeAfter;
      } else if (dir > 0) {
        before = $pos.node(d + 1);
        index++;
        after = $pos.node(d).maybeChild(index);
      } else {
        before = $pos.node(d).maybeChild(index - 1);
        after = $pos.node(d + 1);
      }
      if (
        before &&
        !before.isTextblock &&
        joinable2(before, after) &&
        $pos.node(d).canReplace(index, index + 1)
      )
        return pos;
      if (d == 0) break;
      pos = dir < 0 ? $pos.before(d) : $pos.after(d);
    }
  }
  function replaceStep(doc, from, to = from, slice = Slice.empty) {
    if (from == to && !slice.size) return null;
    let $from = doc.resolve(from),
      $to = doc.resolve(to);
    if (fitsTrivially($from, $to, slice))
      return new ReplaceStep(from, to, slice);
    return new Fitter($from, $to, slice).fit();
  }
  function fitsTrivially($from, $to, slice) {
    return (
      !slice.openStart &&
      !slice.openEnd &&
      $from.start() == $to.start() &&
      $from.parent.canReplace($from.index(), $to.index(), slice.content)
    );
  }
  var Fitter = class {
    constructor($from, $to, unplaced) {
      this.$from = $from;
      this.$to = $to;
      this.unplaced = unplaced;
      this.frontier = [];
      this.placed = Fragment.empty;
      for (let i = 0; i <= $from.depth; i++) {
        let node = $from.node(i);
        this.frontier.push({
          type: node.type,
          match: node.contentMatchAt($from.indexAfter(i)),
        });
      }
      for (let i = $from.depth; i > 0; i--)
        this.placed = Fragment.from($from.node(i).copy(this.placed));
    }
    get depth() {
      return this.frontier.length - 1;
    }
    fit() {
      while (this.unplaced.size) {
        let fit = this.findFittable();
        if (fit) this.placeNodes(fit);
        else this.openMore() || this.dropNode();
      }
      let moveInline = this.mustMoveInline(),
        placedSize = this.placed.size - this.depth - this.$from.depth;
      let $from = this.$from,
        $to = this.close(
          moveInline < 0 ? this.$to : $from.doc.resolve(moveInline)
        );
      if (!$to) return null;
      let content = this.placed,
        openStart = $from.depth,
        openEnd = $to.depth;
      while (openStart && openEnd && content.childCount == 1) {
        content = content.firstChild.content;
        openStart--;
        openEnd--;
      }
      let slice = new Slice(content, openStart, openEnd);
      if (moveInline > -1)
        return new ReplaceAroundStep(
          $from.pos,
          moveInline,
          this.$to.pos,
          this.$to.end(),
          slice,
          placedSize
        );
      if (slice.size || $from.pos != this.$to.pos)
        return new ReplaceStep($from.pos, $to.pos, slice);
      return null;
    }
    // Find a position on the start spine of `this.unplaced` that has
    // content that can be moved somewhere on the frontier. Returns two
    // depths, one for the slice and one for the frontier.
    findFittable() {
      let startDepth = this.unplaced.openStart;
      for (
        let cur = this.unplaced.content, d = 0, openEnd = this.unplaced.openEnd;
        d < startDepth;
        d++
      ) {
        let node = cur.firstChild;
        if (cur.childCount > 1) openEnd = 0;
        if (node.type.spec.isolating && openEnd <= d) {
          startDepth = d;
          break;
        }
        cur = node.content;
      }
      for (let pass = 1; pass <= 2; pass++) {
        for (
          let sliceDepth = pass == 1 ? startDepth : this.unplaced.openStart;
          sliceDepth >= 0;
          sliceDepth--
        ) {
          let fragment,
            parent = null;
          if (sliceDepth) {
            parent = contentAt(
              this.unplaced.content,
              sliceDepth - 1
            ).firstChild;
            fragment = parent.content;
          } else {
            fragment = this.unplaced.content;
          }
          let first2 = fragment.firstChild;
          for (
            let frontierDepth = this.depth;
            frontierDepth >= 0;
            frontierDepth--
          ) {
            let { type, match } = this.frontier[frontierDepth],
              wrap,
              inject = null;
            if (
              pass == 1 &&
              (first2
                ? match.matchType(first2.type) ||
                  (inject = match.fillBefore(Fragment.from(first2), false))
                : parent && type.compatibleContent(parent.type))
            )
              return { sliceDepth, frontierDepth, parent, inject };
            else if (
              pass == 2 &&
              first2 &&
              (wrap = match.findWrapping(first2.type))
            )
              return { sliceDepth, frontierDepth, parent, wrap };
            if (parent && match.matchType(parent.type)) break;
          }
        }
      }
    }
    openMore() {
      let { content, openStart, openEnd } = this.unplaced;
      let inner = contentAt(content, openStart);
      if (!inner.childCount || inner.firstChild.isLeaf) return false;
      this.unplaced = new Slice(
        content,
        openStart + 1,
        Math.max(
          openEnd,
          inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0
        )
      );
      return true;
    }
    dropNode() {
      let { content, openStart, openEnd } = this.unplaced;
      let inner = contentAt(content, openStart);
      if (inner.childCount <= 1 && openStart > 0) {
        let openAtEnd = content.size - openStart <= openStart + inner.size;
        this.unplaced = new Slice(
          dropFromFragment(content, openStart - 1, 1),
          openStart - 1,
          openAtEnd ? openStart - 1 : openEnd
        );
      } else {
        this.unplaced = new Slice(
          dropFromFragment(content, openStart, 1),
          openStart,
          openEnd
        );
      }
    }
    // Move content from the unplaced slice at `sliceDepth` to the
    // frontier node at `frontierDepth`. Close that frontier node when
    // applicable.
    placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap }) {
      while (this.depth > frontierDepth) this.closeFrontierNode();
      if (wrap)
        for (let i = 0; i < wrap.length; i++) this.openFrontierNode(wrap[i]);
      let slice = this.unplaced,
        fragment = parent ? parent.content : slice.content;
      let openStart = slice.openStart - sliceDepth;
      let taken = 0,
        add = [];
      let { match, type } = this.frontier[frontierDepth];
      if (inject) {
        for (let i = 0; i < inject.childCount; i++) add.push(inject.child(i));
        match = match.matchFragment(inject);
      }
      let openEndCount =
        fragment.size + sliceDepth - (slice.content.size - slice.openEnd);
      while (taken < fragment.childCount) {
        let next = fragment.child(taken),
          matches2 = match.matchType(next.type);
        if (!matches2) break;
        taken++;
        if (taken > 1 || openStart == 0 || next.content.size) {
          match = matches2;
          add.push(
            closeNodeStart(
              next.mark(type.allowedMarks(next.marks)),
              taken == 1 ? openStart : 0,
              taken == fragment.childCount ? openEndCount : -1
            )
          );
        }
      }
      let toEnd = taken == fragment.childCount;
      if (!toEnd) openEndCount = -1;
      this.placed = addToFragment(
        this.placed,
        frontierDepth,
        Fragment.from(add)
      );
      this.frontier[frontierDepth].match = match;
      if (
        toEnd &&
        openEndCount < 0 &&
        parent &&
        parent.type == this.frontier[this.depth].type &&
        this.frontier.length > 1
      )
        this.closeFrontierNode();
      for (let i = 0, cur = fragment; i < openEndCount; i++) {
        let node = cur.lastChild;
        this.frontier.push({
          type: node.type,
          match: node.contentMatchAt(node.childCount),
        });
        cur = node.content;
      }
      this.unplaced = !toEnd
        ? new Slice(
            dropFromFragment(slice.content, sliceDepth, taken),
            slice.openStart,
            slice.openEnd
          )
        : sliceDepth == 0
        ? Slice.empty
        : new Slice(
            dropFromFragment(slice.content, sliceDepth - 1, 1),
            sliceDepth - 1,
            openEndCount < 0 ? slice.openEnd : sliceDepth - 1
          );
    }
    mustMoveInline() {
      if (!this.$to.parent.isTextblock) return -1;
      let top = this.frontier[this.depth],
        level;
      if (
        !top.type.isTextblock ||
        !contentAfterFits(
          this.$to,
          this.$to.depth,
          top.type,
          top.match,
          false
        ) ||
        (this.$to.depth == this.depth &&
          (level = this.findCloseLevel(this.$to)) &&
          level.depth == this.depth)
      )
        return -1;
      let { depth } = this.$to,
        after = this.$to.after(depth);
      while (depth > 1 && after == this.$to.end(--depth)) ++after;
      return after;
    }
    findCloseLevel($to) {
      scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {
        let { match, type } = this.frontier[i];
        let dropInner =
          i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));
        let fit = contentAfterFits($to, i, type, match, dropInner);
        if (!fit) continue;
        for (let d = i - 1; d >= 0; d--) {
          let { match: match2, type: type2 } = this.frontier[d];
          let matches2 = contentAfterFits($to, d, type2, match2, true);
          if (!matches2 || matches2.childCount) continue scan;
        }
        return {
          depth: i,
          fit,
          move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to,
        };
      }
    }
    close($to) {
      let close2 = this.findCloseLevel($to);
      if (!close2) return null;
      while (this.depth > close2.depth) this.closeFrontierNode();
      if (close2.fit.childCount)
        this.placed = addToFragment(this.placed, close2.depth, close2.fit);
      $to = close2.move;
      for (let d = close2.depth + 1; d <= $to.depth; d++) {
        let node = $to.node(d),
          add = node.type.contentMatch.fillBefore(
            node.content,
            true,
            $to.index(d)
          );
        this.openFrontierNode(node.type, node.attrs, add);
      }
      return $to;
    }
    openFrontierNode(type, attrs = null, content) {
      let top = this.frontier[this.depth];
      top.match = top.match.matchType(type);
      this.placed = addToFragment(
        this.placed,
        this.depth,
        Fragment.from(type.create(attrs, content))
      );
      this.frontier.push({ type, match: type.contentMatch });
    }
    closeFrontierNode() {
      let open = this.frontier.pop();
      let add = open.match.fillBefore(Fragment.empty, true);
      if (add.childCount)
        this.placed = addToFragment(this.placed, this.frontier.length, add);
    }
  };
  function dropFromFragment(fragment, depth, count) {
    if (depth == 0) return fragment.cutByIndex(count, fragment.childCount);
    return fragment.replaceChild(
      0,
      fragment.firstChild.copy(
        dropFromFragment(fragment.firstChild.content, depth - 1, count)
      )
    );
  }
  function addToFragment(fragment, depth, content) {
    if (depth == 0) return fragment.append(content);
    return fragment.replaceChild(
      fragment.childCount - 1,
      fragment.lastChild.copy(
        addToFragment(fragment.lastChild.content, depth - 1, content)
      )
    );
  }
  function contentAt(fragment, depth) {
    for (let i = 0; i < depth; i++) fragment = fragment.firstChild.content;
    return fragment;
  }
  function closeNodeStart(node, openStart, openEnd) {
    if (openStart <= 0) return node;
    let frag = node.content;
    if (openStart > 1)
      frag = frag.replaceChild(
        0,
        closeNodeStart(
          frag.firstChild,
          openStart - 1,
          frag.childCount == 1 ? openEnd - 1 : 0
        )
      );
    if (openStart > 0) {
      frag = node.type.contentMatch.fillBefore(frag).append(frag);
      if (openEnd <= 0)
        frag = frag.append(
          node.type.contentMatch
            .matchFragment(frag)
            .fillBefore(Fragment.empty, true)
        );
    }
    return node.copy(frag);
  }
  function contentAfterFits($to, depth, type, match, open) {
    let node = $to.node(depth),
      index = open ? $to.indexAfter(depth) : $to.index(depth);
    if (index == node.childCount && !type.compatibleContent(node.type))
      return null;
    let fit = match.fillBefore(node.content, true, index);
    return fit && !invalidMarks(type, node.content, index) ? fit : null;
  }
  function invalidMarks(type, fragment, start) {
    for (let i = start; i < fragment.childCount; i++)
      if (!type.allowsMarks(fragment.child(i).marks)) return true;
    return false;
  }
  var AttrStep = class _AttrStep extends Step {
    /**
    Construct an attribute step.
    */
    constructor(pos, attr, value) {
      super();
      this.pos = pos;
      this.attr = attr;
      this.value = value;
    }
    apply(doc) {
      let node = doc.nodeAt(this.pos);
      if (!node) return StepResult.fail("No node at attribute step's position");
      let attrs = /* @__PURE__ */ Object.create(null);
      for (let name in node.attrs) attrs[name] = node.attrs[name];
      attrs[this.attr] = this.value;
      let updated = node.type.create(attrs, null, node.marks);
      return StepResult.fromReplace(
        doc,
        this.pos,
        this.pos + 1,
        new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1)
      );
    }
    getMap() {
      return StepMap.empty;
    }
    invert(doc) {
      return new _AttrStep(
        this.pos,
        this.attr,
        doc.nodeAt(this.pos).attrs[this.attr]
      );
    }
    map(mapping) {
      let pos = mapping.mapResult(this.pos, 1);
      return pos.deletedAfter
        ? null
        : new _AttrStep(pos.pos, this.attr, this.value);
    }
    toJSON() {
      return {
        stepType: "attr",
        pos: this.pos,
        attr: this.attr,
        value: this.value,
      };
    }
    static fromJSON(schema, json) {
      if (typeof json.pos != "number" || typeof json.attr != "string")
        throw new RangeError("Invalid input for AttrStep.fromJSON");
      return new _AttrStep(json.pos, json.attr, json.value);
    }
  };
  Step.jsonID("attr", AttrStep);
  var DocAttrStep = class _DocAttrStep extends Step {
    /**
    Construct an attribute step.
    */
    constructor(attr, value) {
      super();
      this.attr = attr;
      this.value = value;
    }
    apply(doc) {
      let attrs = /* @__PURE__ */ Object.create(null);
      for (let name in doc.attrs) attrs[name] = doc.attrs[name];
      attrs[this.attr] = this.value;
      let updated = doc.type.create(attrs, doc.content, doc.marks);
      return StepResult.ok(updated);
    }
    getMap() {
      return StepMap.empty;
    }
    invert(doc) {
      return new _DocAttrStep(this.attr, doc.attrs[this.attr]);
    }
    map(mapping) {
      return this;
    }
    toJSON() {
      return { stepType: "docAttr", attr: this.attr, value: this.value };
    }
    static fromJSON(schema, json) {
      if (typeof json.attr != "string")
        throw new RangeError("Invalid input for DocAttrStep.fromJSON");
      return new _DocAttrStep(json.attr, json.value);
    }
  };
  Step.jsonID("docAttr", DocAttrStep);
  var TransformError = class extends Error {};
  TransformError = function TransformError2(message) {
    let err = Error.call(this, message);
    err.__proto__ = TransformError2.prototype;
    return err;
  };
  TransformError.prototype = Object.create(Error.prototype);
  TransformError.prototype.constructor = TransformError;
  TransformError.prototype.name = "TransformError";

  // node_modules/prosemirror-state/dist/index.js
  var classesById = /* @__PURE__ */ Object.create(null);
  var Selection = class {
    /**
    Initialize a selection with the head and anchor and ranges. If no
    ranges are given, constructs a single range across `$anchor` and
    `$head`.
    */
    constructor($anchor, $head, ranges) {
      this.$anchor = $anchor;
      this.$head = $head;
      this.ranges = ranges || [
        new SelectionRange($anchor.min($head), $anchor.max($head)),
      ];
    }
    /**
    The selection's anchor, as an unresolved position.
    */
    get anchor() {
      return this.$anchor.pos;
    }
    /**
    The selection's head.
    */
    get head() {
      return this.$head.pos;
    }
    /**
    The lower bound of the selection's main range.
    */
    get from() {
      return this.$from.pos;
    }
    /**
    The upper bound of the selection's main range.
    */
    get to() {
      return this.$to.pos;
    }
    /**
    The resolved lower  bound of the selection's main range.
    */
    get $from() {
      return this.ranges[0].$from;
    }
    /**
    The resolved upper bound of the selection's main range.
    */
    get $to() {
      return this.ranges[0].$to;
    }
    /**
    Indicates whether the selection contains any content.
    */
    get empty() {
      let ranges = this.ranges;
      for (let i = 0; i < ranges.length; i++)
        if (ranges[i].$from.pos != ranges[i].$to.pos) return false;
      return true;
    }
    /**
    Get the content of this selection as a slice.
    */
    content() {
      return this.$from.doc.slice(this.from, this.to, true);
    }
    /**
    Replace the selection with a slice or, if no slice is given,
    delete the selection. Will append to the given transaction.
    */
    replace(tr, content = Slice.empty) {
      let lastNode = content.content.lastChild,
        lastParent = null;
      for (let i = 0; i < content.openEnd; i++) {
        lastParent = lastNode;
        lastNode = lastNode.lastChild;
      }
      let mapFrom = tr.steps.length,
        ranges = this.ranges;
      for (let i = 0; i < ranges.length; i++) {
        let { $from, $to } = ranges[i],
          mapping = tr.mapping.slice(mapFrom);
        tr.replaceRange(
          mapping.map($from.pos),
          mapping.map($to.pos),
          i ? Slice.empty : content
        );
        if (i == 0)
          selectionToInsertionEnd(
            tr,
            mapFrom,
            (
              lastNode
                ? lastNode.isInline
                : lastParent && lastParent.isTextblock
            )
              ? -1
              : 1
          );
      }
    }
    /**
    Replace the selection with the given node, appending the changes
    to the given transaction.
    */
    replaceWith(tr, node) {
      let mapFrom = tr.steps.length,
        ranges = this.ranges;
      for (let i = 0; i < ranges.length; i++) {
        let { $from, $to } = ranges[i],
          mapping = tr.mapping.slice(mapFrom);
        let from = mapping.map($from.pos),
          to = mapping.map($to.pos);
        if (i) {
          tr.deleteRange(from, to);
        } else {
          tr.replaceRangeWith(from, to, node);
          selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);
        }
      }
    }
    /**
    Find a valid cursor or leaf node selection starting at the given
    position and searching back if `dir` is negative, and forward if
    positive. When `textOnly` is true, only consider cursor
    selections. Will return null when no valid selection position is
    found.
    */
    static findFrom($pos, dir, textOnly = false) {
      let inner = $pos.parent.inlineContent
        ? new TextSelection($pos)
        : findSelectionIn(
            $pos.node(0),
            $pos.parent,
            $pos.pos,
            $pos.index(),
            dir,
            textOnly
          );
      if (inner) return inner;
      for (let depth = $pos.depth - 1; depth >= 0; depth--) {
        let found2 =
          dir < 0
            ? findSelectionIn(
                $pos.node(0),
                $pos.node(depth),
                $pos.before(depth + 1),
                $pos.index(depth),
                dir,
                textOnly
              )
            : findSelectionIn(
                $pos.node(0),
                $pos.node(depth),
                $pos.after(depth + 1),
                $pos.index(depth) + 1,
                dir,
                textOnly
              );
        if (found2) return found2;
      }
      return null;
    }
    /**
    Find a valid cursor or leaf node selection near the given
    position. Searches forward first by default, but if `bias` is
    negative, it will search backwards first.
    */
    static near($pos, bias = 1) {
      return (
        this.findFrom($pos, bias) ||
        this.findFrom($pos, -bias) ||
        new AllSelection($pos.node(0))
      );
    }
    /**
    Find the cursor or leaf node selection closest to the start of
    the given document. Will return an
    [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
    exists.
    */
    static atStart(doc) {
      return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);
    }
    /**
    Find the cursor or leaf node selection closest to the end of the
    given document.
    */
    static atEnd(doc) {
      return (
        findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) ||
        new AllSelection(doc)
      );
    }
    /**
    Deserialize the JSON representation of a selection. Must be
    implemented for custom classes (as a static class method).
    */
    static fromJSON(doc, json) {
      if (!json || !json.type)
        throw new RangeError("Invalid input for Selection.fromJSON");
      let cls = classesById[json.type];
      if (!cls) throw new RangeError(`No selection type ${json.type} defined`);
      return cls.fromJSON(doc, json);
    }
    /**
    To be able to deserialize selections from JSON, custom selection
    classes must register themselves with an ID string, so that they
    can be disambiguated. Try to pick something that's unlikely to
    clash with classes from other modules.
    */
    static jsonID(id, selectionClass) {
      if (id in classesById)
        throw new RangeError("Duplicate use of selection JSON ID " + id);
      classesById[id] = selectionClass;
      selectionClass.prototype.jsonID = id;
      return selectionClass;
    }
    /**
    Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
    which is a value that can be mapped without having access to a
    current document, and later resolved to a real selection for a
    given document again. (This is used mostly by the history to
    track and restore old selections.) The default implementation of
    this method just converts the selection to a text selection and
    returns the bookmark for that.
    */
    getBookmark() {
      return TextSelection.between(this.$anchor, this.$head).getBookmark();
    }
  };
  Selection.prototype.visible = true;
  var SelectionRange = class {
    /**
    Create a range.
    */
    constructor($from, $to) {
      this.$from = $from;
      this.$to = $to;
    }
  };
  var warnedAboutTextSelection = false;
  function checkTextSelection($pos) {
    if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {
      warnedAboutTextSelection = true;
      console["warn"](
        "TextSelection endpoint not pointing into a node with inline content (" +
          $pos.parent.type.name +
          ")"
      );
    }
  }
  var TextSelection = class _TextSelection extends Selection {
    /**
    Construct a text selection between the given points.
    */
    constructor($anchor, $head = $anchor) {
      checkTextSelection($anchor);
      checkTextSelection($head);
      super($anchor, $head);
    }
    /**
    Returns a resolved position if this is a cursor selection (an
    empty text selection), and null otherwise.
    */
    get $cursor() {
      return this.$anchor.pos == this.$head.pos ? this.$head : null;
    }
    map(doc, mapping) {
      let $head = doc.resolve(mapping.map(this.head));
      if (!$head.parent.inlineContent) return Selection.near($head);
      let $anchor = doc.resolve(mapping.map(this.anchor));
      return new _TextSelection(
        $anchor.parent.inlineContent ? $anchor : $head,
        $head
      );
    }
    replace(tr, content = Slice.empty) {
      super.replace(tr, content);
      if (content == Slice.empty) {
        let marks = this.$from.marksAcross(this.$to);
        if (marks) tr.ensureMarks(marks);
      }
    }
    eq(other) {
      return (
        other instanceof _TextSelection &&
        other.anchor == this.anchor &&
        other.head == this.head
      );
    }
    getBookmark() {
      return new TextBookmark(this.anchor, this.head);
    }
    toJSON() {
      return { type: "text", anchor: this.anchor, head: this.head };
    }
    /**
    @internal
    */
    static fromJSON(doc, json) {
      if (typeof json.anchor != "number" || typeof json.head != "number")
        throw new RangeError("Invalid input for TextSelection.fromJSON");
      return new _TextSelection(
        doc.resolve(json.anchor),
        doc.resolve(json.head)
      );
    }
    /**
    Create a text selection from non-resolved positions.
    */
    static create(doc, anchor, head = anchor) {
      let $anchor = doc.resolve(anchor);
      return new this($anchor, head == anchor ? $anchor : doc.resolve(head));
    }
    /**
    Return a text selection that spans the given positions or, if
    they aren't text positions, find a text selection near them.
    `bias` determines whether the method searches forward (default)
    or backwards (negative number) first. Will fall back to calling
    [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
    doesn't contain a valid text position.
    */
    static between($anchor, $head, bias) {
      let dPos = $anchor.pos - $head.pos;
      if (!bias || dPos) bias = dPos >= 0 ? 1 : -1;
      if (!$head.parent.inlineContent) {
        let found2 =
          Selection.findFrom($head, bias, true) ||
          Selection.findFrom($head, -bias, true);
        if (found2) $head = found2.$head;
        else return Selection.near($head, bias);
      }
      if (!$anchor.parent.inlineContent) {
        if (dPos == 0) {
          $anchor = $head;
        } else {
          $anchor = (
            Selection.findFrom($anchor, -bias, true) ||
            Selection.findFrom($anchor, bias, true)
          ).$anchor;
          if ($anchor.pos < $head.pos != dPos < 0) $anchor = $head;
        }
      }
      return new _TextSelection($anchor, $head);
    }
  };
  Selection.jsonID("text", TextSelection);
  var TextBookmark = class _TextBookmark {
    constructor(anchor, head) {
      this.anchor = anchor;
      this.head = head;
    }
    map(mapping) {
      return new _TextBookmark(
        mapping.map(this.anchor),
        mapping.map(this.head)
      );
    }
    resolve(doc) {
      return TextSelection.between(
        doc.resolve(this.anchor),
        doc.resolve(this.head)
      );
    }
  };
  var NodeSelection = class _NodeSelection extends Selection {
    /**
    Create a node selection. Does not verify the validity of its
    argument.
    */
    constructor($pos) {
      let node = $pos.nodeAfter;
      let $end = $pos.node(0).resolve($pos.pos + node.nodeSize);
      super($pos, $end);
      this.node = node;
    }
    map(doc, mapping) {
      let { deleted, pos } = mapping.mapResult(this.anchor);
      let $pos = doc.resolve(pos);
      if (deleted) return Selection.near($pos);
      return new _NodeSelection($pos);
    }
    content() {
      return new Slice(Fragment.from(this.node), 0, 0);
    }
    eq(other) {
      return other instanceof _NodeSelection && other.anchor == this.anchor;
    }
    toJSON() {
      return { type: "node", anchor: this.anchor };
    }
    getBookmark() {
      return new NodeBookmark(this.anchor);
    }
    /**
    @internal
    */
    static fromJSON(doc, json) {
      if (typeof json.anchor != "number")
        throw new RangeError("Invalid input for NodeSelection.fromJSON");
      return new _NodeSelection(doc.resolve(json.anchor));
    }
    /**
    Create a node selection from non-resolved positions.
    */
    static create(doc, from) {
      return new _NodeSelection(doc.resolve(from));
    }
    /**
    Determines whether the given node may be selected as a node
    selection.
    */
    static isSelectable(node) {
      return !node.isText && node.type.spec.selectable !== false;
    }
  };
  NodeSelection.prototype.visible = false;
  Selection.jsonID("node", NodeSelection);
  var NodeBookmark = class _NodeBookmark {
    constructor(anchor) {
      this.anchor = anchor;
    }
    map(mapping) {
      let { deleted, pos } = mapping.mapResult(this.anchor);
      return deleted ? new TextBookmark(pos, pos) : new _NodeBookmark(pos);
    }
    resolve(doc) {
      let $pos = doc.resolve(this.anchor),
        node = $pos.nodeAfter;
      if (node && NodeSelection.isSelectable(node))
        return new NodeSelection($pos);
      return Selection.near($pos);
    }
  };
  var AllSelection = class _AllSelection extends Selection {
    /**
    Create an all-selection over the given document.
    */
    constructor(doc) {
      super(doc.resolve(0), doc.resolve(doc.content.size));
    }
    replace(tr, content = Slice.empty) {
      if (content == Slice.empty) {
        tr.delete(0, tr.doc.content.size);
        let sel = Selection.atStart(tr.doc);
        if (!sel.eq(tr.selection)) tr.setSelection(sel);
      } else {
        super.replace(tr, content);
      }
    }
    toJSON() {
      return { type: "all" };
    }
    /**
    @internal
    */
    static fromJSON(doc) {
      return new _AllSelection(doc);
    }
    map(doc) {
      return new _AllSelection(doc);
    }
    eq(other) {
      return other instanceof _AllSelection;
    }
    getBookmark() {
      return AllBookmark;
    }
  };
  Selection.jsonID("all", AllSelection);
  var AllBookmark = {
    map() {
      return this;
    },
    resolve(doc) {
      return new AllSelection(doc);
    },
  };
  function findSelectionIn(doc, node, pos, index, dir, text = false) {
    if (node.inlineContent) return TextSelection.create(doc, pos);
    for (
      let i = index - (dir > 0 ? 0 : 1);
      dir > 0 ? i < node.childCount : i >= 0;
      i += dir
    ) {
      let child = node.child(i);
      if (!child.isAtom) {
        let inner = findSelectionIn(
          doc,
          child,
          pos + dir,
          dir < 0 ? child.childCount : 0,
          dir,
          text
        );
        if (inner) return inner;
      } else if (!text && NodeSelection.isSelectable(child)) {
        return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));
      }
      pos += child.nodeSize * dir;
    }
    return null;
  }
  function selectionToInsertionEnd(tr, startLen, bias) {
    let last = tr.steps.length - 1;
    if (last < startLen) return;
    let step = tr.steps[last];
    if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep))
      return;
    let map = tr.mapping.maps[last],
      end;
    map.forEach((_from, _to, _newFrom, newTo) => {
      if (end == null) end = newTo;
    });
    tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
  }
  function bind(f, self) {
    return !self || !f ? f : f.bind(self);
  }
  var FieldDesc = class {
    constructor(name, desc, self) {
      this.name = name;
      this.init = bind(desc.init, self);
      this.apply = bind(desc.apply, self);
    }
  };
  var baseFields = [
    new FieldDesc("doc", {
      init(config) {
        return config.doc || config.schema.topNodeType.createAndFill();
      },
      apply(tr) {
        return tr.doc;
      },
    }),
    new FieldDesc("selection", {
      init(config, instance) {
        return config.selection || Selection.atStart(instance.doc);
      },
      apply(tr) {
        return tr.selection;
      },
    }),
    new FieldDesc("storedMarks", {
      init(config) {
        return config.storedMarks || null;
      },
      apply(tr, _marks, _old, state) {
        return state.selection.$cursor ? tr.storedMarks : null;
      },
    }),
    new FieldDesc("scrollToSelection", {
      init() {
        return 0;
      },
      apply(tr, prev) {
        return tr.scrolledIntoView ? prev + 1 : prev;
      },
    }),
  ];
  function bindProps(obj, self, target) {
    for (let prop in obj) {
      let val = obj[prop];
      if (val instanceof Function) val = val.bind(self);
      else if (prop == "handleDOMEvents") val = bindProps(val, self, {});
      target[prop] = val;
    }
    return target;
  }
  var Plugin = class {
    /**
    Create a plugin.
    */
    constructor(spec) {
      this.spec = spec;
      this.props = {};
      if (spec.props) bindProps(spec.props, this, this.props);
      this.key = spec.key ? spec.key.key : createKey("plugin");
    }
    /**
    Extract the plugin's state field from an editor state.
    */
    getState(state) {
      return state[this.key];
    }
  };
  var keys = /* @__PURE__ */ Object.create(null);
  function createKey(name) {
    if (name in keys) return name + "$" + ++keys[name];
    keys[name] = 0;
    return name + "$";
  }
  var PluginKey = class {
    /**
    Create a plugin key.
    */
    constructor(name = "key") {
      this.key = createKey(name);
    }
    /**
    Get the active plugin with this key, if any, from an editor
    state.
    */
    get(state) {
      return state.config.pluginsByKey[this.key];
    }
    /**
    Get the plugin's state from an editor state.
    */
    getState(state) {
      return state[this.key];
    }
  };

  // node_modules/prosemirror-commands/dist/index.js
  var deleteSelection = (state, dispatch) => {
    if (state.selection.empty) return false;
    if (dispatch) dispatch(state.tr.deleteSelection().scrollIntoView());
    return true;
  };
  function atBlockStart(state, view) {
    let { $cursor } = state.selection;
    if (
      !$cursor ||
      (view
        ? !view.endOfTextblock("backward", state)
        : $cursor.parentOffset > 0)
    )
      return null;
    return $cursor;
  }
  var joinBackward = (state, dispatch, view) => {
    let $cursor = atBlockStart(state, view);
    if (!$cursor) return false;
    let $cut = findCutBefore($cursor);
    if (!$cut) {
      let range = $cursor.blockRange(),
        target = range && liftTarget(range);
      if (target == null) return false;
      if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView());
      return true;
    }
    let before = $cut.nodeBefore;
    if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))
      return true;
    if (
      $cursor.parent.content.size == 0 &&
      (textblockAt(before, "end") || NodeSelection.isSelectable(before))
    ) {
      let delStep = replaceStep(
        state.doc,
        $cursor.before(),
        $cursor.after(),
        Slice.empty
      );
      if (delStep && delStep.slice.size < delStep.to - delStep.from) {
        if (dispatch) {
          let tr = state.tr.step(delStep);
          tr.setSelection(
            textblockAt(before, "end")
              ? Selection.findFrom(
                  tr.doc.resolve(tr.mapping.map($cut.pos, -1)),
                  -1
                )
              : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize)
          );
          dispatch(tr.scrollIntoView());
        }
        return true;
      }
    }
    if (before.isAtom && $cut.depth == $cursor.depth - 1) {
      if (dispatch)
        dispatch(
          state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView()
        );
      return true;
    }
    return false;
  };
  function textblockAt(node, side, only = false) {
    for (
      let scan = node;
      scan;
      scan = side == "start" ? scan.firstChild : scan.lastChild
    ) {
      if (scan.isTextblock) return true;
      if (only && scan.childCount != 1) return false;
    }
    return false;
  }
  var selectNodeBackward = (state, dispatch, view) => {
    let { $head, empty } = state.selection,
      $cut = $head;
    if (!empty) return false;
    if ($head.parent.isTextblock) {
      if (
        view ? !view.endOfTextblock("backward", state) : $head.parentOffset > 0
      )
        return false;
      $cut = findCutBefore($head);
    }
    let node = $cut && $cut.nodeBefore;
    if (!node || !NodeSelection.isSelectable(node)) return false;
    if (dispatch)
      dispatch(
        state.tr
          .setSelection(
            NodeSelection.create(state.doc, $cut.pos - node.nodeSize)
          )
          .scrollIntoView()
      );
    return true;
  };
  function findCutBefore($pos) {
    if (!$pos.parent.type.spec.isolating)
      for (let i = $pos.depth - 1; i >= 0; i--) {
        if ($pos.index(i) > 0) return $pos.doc.resolve($pos.before(i + 1));
        if ($pos.node(i).type.spec.isolating) break;
      }
    return null;
  }
  function atBlockEnd(state, view) {
    let { $cursor } = state.selection;
    if (
      !$cursor ||
      (view
        ? !view.endOfTextblock("forward", state)
        : $cursor.parentOffset < $cursor.parent.content.size)
    )
      return null;
    return $cursor;
  }
  var joinForward = (state, dispatch, view) => {
    let $cursor = atBlockEnd(state, view);
    if (!$cursor) return false;
    let $cut = findCutAfter($cursor);
    if (!$cut) return false;
    let after = $cut.nodeAfter;
    if (deleteBarrier(state, $cut, dispatch)) return true;
    if (
      $cursor.parent.content.size == 0 &&
      (textblockAt(after, "start") || NodeSelection.isSelectable(after))
    ) {
      let delStep = replaceStep(
        state.doc,
        $cursor.before(),
        $cursor.after(),
        Slice.empty
      );
      if (delStep && delStep.slice.size < delStep.to - delStep.from) {
        if (dispatch) {
          let tr = state.tr.step(delStep);
          tr.setSelection(
            textblockAt(after, "start")
              ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)
              : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos))
          );
          dispatch(tr.scrollIntoView());
        }
        return true;
      }
    }
    if (after.isAtom && $cut.depth == $cursor.depth - 1) {
      if (dispatch)
        dispatch(
          state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView()
        );
      return true;
    }
    return false;
  };
  var selectNodeForward = (state, dispatch, view) => {
    let { $head, empty } = state.selection,
      $cut = $head;
    if (!empty) return false;
    if ($head.parent.isTextblock) {
      if (
        view
          ? !view.endOfTextblock("forward", state)
          : $head.parentOffset < $head.parent.content.size
      )
        return false;
      $cut = findCutAfter($head);
    }
    let node = $cut && $cut.nodeAfter;
    if (!node || !NodeSelection.isSelectable(node)) return false;
    if (dispatch)
      dispatch(
        state.tr
          .setSelection(NodeSelection.create(state.doc, $cut.pos))
          .scrollIntoView()
      );
    return true;
  };
  function findCutAfter($pos) {
    if (!$pos.parent.type.spec.isolating)
      for (let i = $pos.depth - 1; i >= 0; i--) {
        let parent = $pos.node(i);
        if ($pos.index(i) + 1 < parent.childCount)
          return $pos.doc.resolve($pos.after(i + 1));
        if (parent.type.spec.isolating) break;
      }
    return null;
  }
  var joinUp = (state, dispatch) => {
    let sel = state.selection,
      nodeSel = sel instanceof NodeSelection,
      point;
    if (nodeSel) {
      if (sel.node.isTextblock || !canJoin(state.doc, sel.from)) return false;
      point = sel.from;
    } else {
      point = joinPoint(state.doc, sel.from, -1);
      if (point == null) return false;
    }
    if (dispatch) {
      let tr = state.tr.join(point);
      if (nodeSel)
        tr.setSelection(
          NodeSelection.create(
            tr.doc,
            point - state.doc.resolve(point).nodeBefore.nodeSize
          )
        );
      dispatch(tr.scrollIntoView());
    }
    return true;
  };
  var joinDown = (state, dispatch) => {
    let sel = state.selection,
      point;
    if (sel instanceof NodeSelection) {
      if (sel.node.isTextblock || !canJoin(state.doc, sel.to)) return false;
      point = sel.to;
    } else {
      point = joinPoint(state.doc, sel.to, 1);
      if (point == null) return false;
    }
    if (dispatch) dispatch(state.tr.join(point).scrollIntoView());
    return true;
  };
  var lift = (state, dispatch) => {
    let { $from, $to } = state.selection;
    let range = $from.blockRange($to),
      target = range && liftTarget(range);
    if (target == null) return false;
    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView());
    return true;
  };
  var newlineInCode = (state, dispatch) => {
    let { $head, $anchor } = state.selection;
    if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
      return false;
    if (dispatch) dispatch(state.tr.insertText("\n").scrollIntoView());
    return true;
  };
  function defaultBlockAt(match) {
    for (let i = 0; i < match.edgeCount; i++) {
      let { type } = match.edge(i);
      if (type.isTextblock && !type.hasRequiredAttrs()) return type;
    }
    return null;
  }
  var exitCode = (state, dispatch) => {
    let { $head, $anchor } = state.selection;
    if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
      return false;
    let above = $head.node(-1),
      after = $head.indexAfter(-1),
      type = defaultBlockAt(above.contentMatchAt(after));
    if (!type || !above.canReplaceWith(after, after, type)) return false;
    if (dispatch) {
      let pos = $head.after(),
        tr = state.tr.replaceWith(pos, pos, type.createAndFill());
      tr.setSelection(Selection.near(tr.doc.resolve(pos), 1));
      dispatch(tr.scrollIntoView());
    }
    return true;
  };
  var createParagraphNear = (state, dispatch) => {
    let sel = state.selection,
      { $from, $to } = sel;
    if (
      sel instanceof AllSelection ||
      $from.parent.inlineContent ||
      $to.parent.inlineContent
    )
      return false;
    let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));
    if (!type || !type.isTextblock) return false;
    if (dispatch) {
      let side = (
        !$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to
      ).pos;
      let tr = state.tr.insert(side, type.createAndFill());
      tr.setSelection(TextSelection.create(tr.doc, side + 1));
      dispatch(tr.scrollIntoView());
    }
    return true;
  };
  var liftEmptyBlock = (state, dispatch) => {
    let { $cursor } = state.selection;
    if (!$cursor || $cursor.parent.content.size) return false;
    if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
      let before = $cursor.before();
      if (canSplit(state.doc, before)) {
        if (dispatch) dispatch(state.tr.split(before).scrollIntoView());
        return true;
      }
    }
    let range = $cursor.blockRange(),
      target = range && liftTarget(range);
    if (target == null) return false;
    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView());
    return true;
  };
  function splitBlockAs(splitNode) {
    return (state, dispatch) => {
      let { $from, $to } = state.selection;
      if (
        state.selection instanceof NodeSelection &&
        state.selection.node.isBlock
      ) {
        if (!$from.parentOffset || !canSplit(state.doc, $from.pos))
          return false;
        if (dispatch) dispatch(state.tr.split($from.pos).scrollIntoView());
        return true;
      }
      if (!$from.parent.isBlock) return false;
      if (dispatch) {
        let atEnd = $to.parentOffset == $to.parent.content.size;
        let tr = state.tr;
        if (
          state.selection instanceof TextSelection ||
          state.selection instanceof AllSelection
        )
          tr.deleteSelection();
        let deflt =
          $from.depth == 0
            ? null
            : defaultBlockAt(
                $from.node(-1).contentMatchAt($from.indexAfter(-1))
              );
        let splitType = splitNode && splitNode($to.parent, atEnd);
        let types = splitType
          ? [splitType]
          : atEnd && deflt
          ? [{ type: deflt }]
          : void 0;
        let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);
        if (
          !types &&
          !can &&
          canSplit(
            tr.doc,
            tr.mapping.map($from.pos),
            1,
            deflt ? [{ type: deflt }] : void 0
          )
        ) {
          if (deflt) types = [{ type: deflt }];
          can = true;
        }
        if (can) {
          tr.split(tr.mapping.map($from.pos), 1, types);
          if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {
            let first2 = tr.mapping.map($from.before()),
              $first = tr.doc.resolve(first2);
            if (
              deflt &&
              $from
                .node(-1)
                .canReplaceWith($first.index(), $first.index() + 1, deflt)
            )
              tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
          }
        }
        dispatch(tr.scrollIntoView());
      }
      return true;
    };
  }
  var splitBlock = splitBlockAs();
  var selectParentNode = (state, dispatch) => {
    let { $from, to } = state.selection,
      pos;
    let same = $from.sharedDepth(to);
    if (same == 0) return false;
    pos = $from.before(same);
    if (dispatch)
      dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));
    return true;
  };
  var selectAll = (state, dispatch) => {
    if (dispatch) dispatch(state.tr.setSelection(new AllSelection(state.doc)));
    return true;
  };
  function joinMaybeClear(state, $pos, dispatch) {
    let before = $pos.nodeBefore,
      after = $pos.nodeAfter,
      index = $pos.index();
    if (!before || !after || !before.type.compatibleContent(after.type))
      return false;
    if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {
      if (dispatch)
        dispatch(
          state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView()
        );
      return true;
    }
    if (
      !$pos.parent.canReplace(index, index + 1) ||
      !(after.isTextblock || canJoin(state.doc, $pos.pos))
    )
      return false;
    if (dispatch)
      dispatch(
        state.tr
          .clearIncompatible(
            $pos.pos,
            before.type,
            before.contentMatchAt(before.childCount)
          )
          .join($pos.pos)
          .scrollIntoView()
      );
    return true;
  }
  function deleteBarrier(state, $cut, dispatch) {
    let before = $cut.nodeBefore,
      after = $cut.nodeAfter,
      conn,
      match;
    if (before.type.spec.isolating || after.type.spec.isolating) return false;
    if (joinMaybeClear(state, $cut, dispatch)) return true;
    let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);
    if (
      canDelAfter &&
      (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(
        after.type
      )) &&
      match.matchType(conn[0] || after.type).validEnd
    ) {
      if (dispatch) {
        let end = $cut.pos + after.nodeSize,
          wrap = Fragment.empty;
        for (let i = conn.length - 1; i >= 0; i--)
          wrap = Fragment.from(conn[i].create(null, wrap));
        wrap = Fragment.from(before.copy(wrap));
        let tr = state.tr.step(
          new ReplaceAroundStep(
            $cut.pos - 1,
            end,
            $cut.pos,
            end,
            new Slice(wrap, 1, 0),
            conn.length,
            true
          )
        );
        let joinAt = end + 2 * conn.length;
        if (canJoin(tr.doc, joinAt)) tr.join(joinAt);
        dispatch(tr.scrollIntoView());
      }
      return true;
    }
    let selAfter = Selection.findFrom($cut, 1);
    let range = selAfter && selAfter.$from.blockRange(selAfter.$to),
      target = range && liftTarget(range);
    if (target != null && target >= $cut.depth) {
      if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView());
      return true;
    }
    if (
      canDelAfter &&
      textblockAt(after, "start", true) &&
      textblockAt(before, "end")
    ) {
      let at = before,
        wrap = [];
      for (;;) {
        wrap.push(at);
        if (at.isTextblock) break;
        at = at.lastChild;
      }
      let afterText = after,
        afterDepth = 1;
      for (; !afterText.isTextblock; afterText = afterText.firstChild)
        afterDepth++;
      if (at.canReplace(at.childCount, at.childCount, afterText.content)) {
        if (dispatch) {
          let end = Fragment.empty;
          for (let i = wrap.length - 1; i >= 0; i--)
            end = Fragment.from(wrap[i].copy(end));
          let tr = state.tr.step(
            new ReplaceAroundStep(
              $cut.pos - wrap.length,
              $cut.pos + after.nodeSize,
              $cut.pos + afterDepth,
              $cut.pos + after.nodeSize - afterDepth,
              new Slice(end, wrap.length, 0),
              0,
              true
            )
          );
          dispatch(tr.scrollIntoView());
        }
        return true;
      }
    }
    return false;
  }
  function selectTextblockSide(side) {
    return function (state, dispatch) {
      let sel = state.selection,
        $pos = side < 0 ? sel.$from : sel.$to;
      let depth = $pos.depth;
      while ($pos.node(depth).isInline) {
        if (!depth) return false;
        depth--;
      }
      if (!$pos.node(depth).isTextblock) return false;
      if (dispatch)
        dispatch(
          state.tr.setSelection(
            TextSelection.create(
              state.doc,
              side < 0 ? $pos.start(depth) : $pos.end(depth)
            )
          )
        );
      return true;
    };
  }
  var selectTextblockStart = selectTextblockSide(-1);
  var selectTextblockEnd = selectTextblockSide(1);
  function wrapIn(nodeType, attrs = null) {
    return function (state, dispatch) {
      let { $from, $to } = state.selection;
      let range = $from.blockRange($to),
        wrapping = range && findWrapping(range, nodeType, attrs);
      if (!wrapping) return false;
      if (dispatch) dispatch(state.tr.wrap(range, wrapping).scrollIntoView());
      return true;
    };
  }
  function setBlockType(nodeType, attrs = null) {
    return function (state, dispatch) {
      let applicable = false;
      for (let i = 0; i < state.selection.ranges.length && !applicable; i++) {
        let {
          $from: { pos: from },
          $to: { pos: to },
        } = state.selection.ranges[i];
        state.doc.nodesBetween(from, to, (node, pos) => {
          if (applicable) return false;
          if (!node.isTextblock || node.hasMarkup(nodeType, attrs)) return;
          if (node.type == nodeType) {
            applicable = true;
          } else {
            let $pos = state.doc.resolve(pos),
              index = $pos.index();
            applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
          }
        });
      }
      if (!applicable) return false;
      if (dispatch) {
        let tr = state.tr;
        for (let i = 0; i < state.selection.ranges.length; i++) {
          let {
            $from: { pos: from },
            $to: { pos: to },
          } = state.selection.ranges[i];
          tr.setBlockType(from, to, nodeType, attrs);
        }
        dispatch(tr.scrollIntoView());
      }
      return true;
    };
  }
  function chainCommands(...commands2) {
    return function (state, dispatch, view) {
      for (let i = 0; i < commands2.length; i++)
        if (commands2[i](state, dispatch, view)) return true;
      return false;
    };
  }
  var backspace = chainCommands(
    deleteSelection,
    joinBackward,
    selectNodeBackward
  );
  var del = chainCommands(deleteSelection, joinForward, selectNodeForward);
  var pcBaseKeymap = {
    Enter: chainCommands(
      newlineInCode,
      createParagraphNear,
      liftEmptyBlock,
      splitBlock
    ),
    "Mod-Enter": exitCode,
    Backspace: backspace,
    "Mod-Backspace": backspace,
    "Shift-Backspace": backspace,
    Delete: del,
    "Mod-Delete": del,
    "Mod-a": selectAll,
  };
  var macBaseKeymap = {
    "Ctrl-h": pcBaseKeymap["Backspace"],
    "Alt-Backspace": pcBaseKeymap["Mod-Backspace"],
    "Ctrl-d": pcBaseKeymap["Delete"],
    "Ctrl-Alt-Backspace": pcBaseKeymap["Mod-Delete"],
    "Alt-Delete": pcBaseKeymap["Mod-Delete"],
    "Alt-d": pcBaseKeymap["Mod-Delete"],
    "Ctrl-a": selectTextblockStart,
    "Ctrl-e": selectTextblockEnd,
  };
  for (let key in pcBaseKeymap) macBaseKeymap[key] = pcBaseKeymap[key];
  var mac =
    typeof navigator != "undefined"
      ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)
      : typeof os != "undefined" && os.platform
      ? os.platform() == "darwin"
      : false;

  // node_modules/prosemirror-schema-list/dist/index.js
  function wrapInList(listType, attrs = null) {
    return function (state, dispatch) {
      let { $from, $to } = state.selection;
      let range = $from.blockRange($to),
        doJoin = false,
        outerRange = range;
      if (!range) return false;
      if (
        range.depth >= 2 &&
        $from.node(range.depth - 1).type.compatibleContent(listType) &&
        range.startIndex == 0
      ) {
        if ($from.index(range.depth - 1) == 0) return false;
        let $insert = state.doc.resolve(range.start - 2);
        outerRange = new NodeRange($insert, $insert, range.depth);
        if (range.endIndex < range.parent.childCount)
          range = new NodeRange(
            $from,
            state.doc.resolve($to.end(range.depth)),
            range.depth
          );
        doJoin = true;
      }
      let wrap = findWrapping(outerRange, listType, attrs, range);
      if (!wrap) return false;
      if (dispatch)
        dispatch(
          doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView()
        );
      return true;
    };
  }
  function doWrapInList(tr, range, wrappers, joinBefore, listType) {
    let content = Fragment.empty;
    for (let i = wrappers.length - 1; i >= 0; i--)
      content = Fragment.from(
        wrappers[i].type.create(wrappers[i].attrs, content)
      );
    tr.step(
      new ReplaceAroundStep(
        range.start - (joinBefore ? 2 : 0),
        range.end,
        range.start,
        range.end,
        new Slice(content, 0, 0),
        wrappers.length,
        true
      )
    );
    let found2 = 0;
    for (let i = 0; i < wrappers.length; i++)
      if (wrappers[i].type == listType) found2 = i + 1;
    let splitDepth = wrappers.length - found2;
    let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0),
      parent = range.parent;
    for (
      let i = range.startIndex, e = range.endIndex, first2 = true;
      i < e;
      i++, first2 = false
    ) {
      if (!first2 && canSplit(tr.doc, splitPos, splitDepth)) {
        tr.split(splitPos, splitDepth);
        splitPos += 2 * splitDepth;
      }
      splitPos += parent.child(i).nodeSize;
    }
    return tr;
  }
  function liftListItem(itemType) {
    return function (state, dispatch) {
      let { $from, $to } = state.selection;
      let range = $from.blockRange(
        $to,
        (node) => node.childCount > 0 && node.firstChild.type == itemType
      );
      if (!range) return false;
      if (!dispatch) return true;
      if ($from.node(range.depth - 1).type == itemType)
        return liftToOuterList(state, dispatch, itemType, range);
      else return liftOutOfList(state, dispatch, range);
    };
  }
  function liftToOuterList(state, dispatch, itemType, range) {
    let tr = state.tr,
      end = range.end,
      endOfList = range.$to.end(range.depth);
    if (end < endOfList) {
      tr.step(
        new ReplaceAroundStep(
          end - 1,
          endOfList,
          end,
          endOfList,
          new Slice(
            Fragment.from(itemType.create(null, range.parent.copy())),
            1,
            0
          ),
          1,
          true
        )
      );
      range = new NodeRange(
        tr.doc.resolve(range.$from.pos),
        tr.doc.resolve(endOfList),
        range.depth
      );
    }
    const target = liftTarget(range);
    if (target == null) return false;
    tr.lift(range, target);
    let after = tr.mapping.map(end, -1) - 1;
    if (canJoin(tr.doc, after)) tr.join(after);
    dispatch(tr.scrollIntoView());
    return true;
  }
  function liftOutOfList(state, dispatch, range) {
    let tr = state.tr,
      list = range.parent;
    for (
      let pos = range.end, i = range.endIndex - 1, e = range.startIndex;
      i > e;
      i--
    ) {
      pos -= list.child(i).nodeSize;
      tr.delete(pos - 1, pos + 1);
    }
    let $start = tr.doc.resolve(range.start),
      item = $start.nodeAfter;
    if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize)
      return false;
    let atStart = range.startIndex == 0,
      atEnd = range.endIndex == list.childCount;
    let parent = $start.node(-1),
      indexBefore = $start.index(-1);
    if (
      !parent.canReplace(
        indexBefore + (atStart ? 0 : 1),
        indexBefore + 1,
        item.content.append(atEnd ? Fragment.empty : Fragment.from(list))
      )
    )
      return false;
    let start = $start.pos,
      end = start + item.nodeSize;
    tr.step(
      new ReplaceAroundStep(
        start - (atStart ? 1 : 0),
        end + (atEnd ? 1 : 0),
        start + 1,
        end - 1,
        new Slice(
          (atStart
            ? Fragment.empty
            : Fragment.from(list.copy(Fragment.empty))
          ).append(
            atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))
          ),
          atStart ? 0 : 1,
          atEnd ? 0 : 1
        ),
        atStart ? 0 : 1
      )
    );
    dispatch(tr.scrollIntoView());
    return true;
  }
  function sinkListItem(itemType) {
    return function (state, dispatch) {
      let { $from, $to } = state.selection;
      let range = $from.blockRange(
        $to,
        (node) => node.childCount > 0 && node.firstChild.type == itemType
      );
      if (!range) return false;
      let startIndex = range.startIndex;
      if (startIndex == 0) return false;
      let parent = range.parent,
        nodeBefore = parent.child(startIndex - 1);
      if (nodeBefore.type != itemType) return false;
      if (dispatch) {
        let nestedBefore =
          nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
        let inner = Fragment.from(nestedBefore ? itemType.create() : null);
        let slice = new Slice(
          Fragment.from(
            itemType.create(
              null,
              Fragment.from(parent.type.create(null, inner))
            )
          ),
          nestedBefore ? 3 : 1,
          0
        );
        let before = range.start,
          after = range.end;
        dispatch(
          state.tr
            .step(
              new ReplaceAroundStep(
                before - (nestedBefore ? 3 : 1),
                after,
                before,
                after,
                slice,
                1,
                true
              )
            )
            .scrollIntoView()
        );
      }
      return true;
    };
  }

  // node_modules/@tiptap/core/dist/index.js
  function createChainableState(config) {
    const { state, transaction } = config;
    let { selection } = transaction;
    let { doc } = transaction;
    let { storedMarks } = transaction;
    return {
      ...state,
      apply: state.apply.bind(state),
      applyTransaction: state.applyTransaction.bind(state),
      filterTransaction: state.filterTransaction,
      plugins: state.plugins,
      schema: state.schema,
      reconfigure: state.reconfigure.bind(state),
      toJSON: state.toJSON.bind(state),
      get storedMarks() {
        return storedMarks;
      },
      get selection() {
        return selection;
      },
      get doc() {
        return doc;
      },
      get tr() {
        selection = transaction.selection;
        doc = transaction.doc;
        storedMarks = transaction.storedMarks;
        return transaction;
      },
    };
  }
  var CommandManager = class {
    constructor(props) {
      this.editor = props.editor;
      this.rawCommands = this.editor.extensionManager.commands;
      this.customState = props.state;
    }
    get hasCustomState() {
      return !!this.customState;
    }
    get state() {
      return this.customState || this.editor.state;
    }
    get commands() {
      const { rawCommands, editor, state } = this;
      const { view } = editor;
      const { tr } = state;
      const props = this.buildProps(tr);
      return Object.fromEntries(
        Object.entries(rawCommands).map(([name, command2]) => {
          const method = (...args) => {
            const callback = command2(...args)(props);
            if (!tr.getMeta("preventDispatch") && !this.hasCustomState) {
              view.dispatch(tr);
            }
            return callback;
          };
          return [name, method];
        })
      );
    }
    get chain() {
      return () => this.createChain();
    }
    get can() {
      return () => this.createCan();
    }
    createChain(startTr, shouldDispatch = true) {
      const { rawCommands, editor, state } = this;
      const { view } = editor;
      const callbacks = [];
      const hasStartTransaction = !!startTr;
      const tr = startTr || state.tr;
      const run = () => {
        if (
          !hasStartTransaction &&
          shouldDispatch &&
          !tr.getMeta("preventDispatch") &&
          !this.hasCustomState
        ) {
          view.dispatch(tr);
        }
        return callbacks.every((callback) => callback === true);
      };
      const chain = {
        ...Object.fromEntries(
          Object.entries(rawCommands).map(([name, command2]) => {
            const chainedCommand = (...args) => {
              const props = this.buildProps(tr, shouldDispatch);
              const callback = command2(...args)(props);
              callbacks.push(callback);
              return chain;
            };
            return [name, chainedCommand];
          })
        ),
        run,
      };
      return chain;
    }
    createCan(startTr) {
      const { rawCommands, state } = this;
      const dispatch = false;
      const tr = startTr || state.tr;
      const props = this.buildProps(tr, dispatch);
      const formattedCommands = Object.fromEntries(
        Object.entries(rawCommands).map(([name, command2]) => {
          return [
            name,
            (...args) => command2(...args)({ ...props, dispatch: void 0 }),
          ];
        })
      );
      return {
        ...formattedCommands,
        chain: () => this.createChain(tr, dispatch),
      };
    }
    buildProps(tr, shouldDispatch = true) {
      const { rawCommands, editor, state } = this;
      const { view } = editor;
      const props = {
        tr,
        editor,
        view,
        state: createChainableState({
          state,
          transaction: tr,
        }),
        dispatch: shouldDispatch ? () => void 0 : void 0,
        chain: () => this.createChain(tr, shouldDispatch),
        can: () => this.createCan(tr),
        get commands() {
          return Object.fromEntries(
            Object.entries(rawCommands).map(([name, command2]) => {
              return [name, (...args) => command2(...args)(props)];
            })
          );
        },
      };
      return props;
    }
  };
  function getExtensionField(extension, field, context) {
    if (extension.config[field] === void 0 && extension.parent) {
      return getExtensionField(extension.parent, field, context);
    }
    if (typeof extension.config[field] === "function") {
      const value = extension.config[field].bind({
        ...context,
        parent: extension.parent
          ? getExtensionField(extension.parent, field, context)
          : null,
      });
      return value;
    }
    return extension.config[field];
  }
  function splitExtensions(extensions) {
    const baseExtensions = extensions.filter(
      (extension) => extension.type === "extension"
    );
    const nodeExtensions = extensions.filter(
      (extension) => extension.type === "node"
    );
    const markExtensions = extensions.filter(
      (extension) => extension.type === "mark"
    );
    return {
      baseExtensions,
      nodeExtensions,
      markExtensions,
    };
  }
  function getNodeType(nameOrType, schema) {
    if (typeof nameOrType === "string") {
      if (!schema.nodes[nameOrType]) {
        throw Error(
          `There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`
        );
      }
      return schema.nodes[nameOrType];
    }
    return nameOrType;
  }
  function mergeAttributes(...objects) {
    return objects
      .filter((item) => !!item)
      .reduce((items, item) => {
        const mergedAttributes = { ...items };
        Object.entries(item).forEach(([key, value]) => {
          const exists = mergedAttributes[key];
          if (!exists) {
            mergedAttributes[key] = value;
            return;
          }
          if (key === "class") {
            const valueClasses = value ? value.split(" ") : [];
            const existingClasses = mergedAttributes[key]
              ? mergedAttributes[key].split(" ")
              : [];
            const insertClasses = valueClasses.filter(
              (valueClass) => !existingClasses.includes(valueClass)
            );
            mergedAttributes[key] = [...existingClasses, ...insertClasses].join(
              " "
            );
          } else if (key === "style") {
            mergedAttributes[key] = [mergedAttributes[key], value].join("; ");
          } else {
            mergedAttributes[key] = value;
          }
        });
        return mergedAttributes;
      }, {});
  }
  function isFunction(value) {
    return typeof value === "function";
  }
  function callOrReturn(value, context = void 0, ...props) {
    if (isFunction(value)) {
      if (context) {
        return value.bind(context)(...props);
      }
      return value(...props);
    }
    return value;
  }
  function isRegExp(value) {
    return Object.prototype.toString.call(value) === "[object RegExp]";
  }
  var InputRule = class {
    constructor(config) {
      this.find = config.find;
      this.handler = config.handler;
    }
  };
  function getType(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  }
  function isPlainObject(value) {
    if (getType(value) !== "Object") {
      return false;
    }
    return (
      value.constructor === Object &&
      Object.getPrototypeOf(value) === Object.prototype
    );
  }
  function mergeDeep(target, source) {
    const output = { ...target };
    if (isPlainObject(target) && isPlainObject(source)) {
      Object.keys(source).forEach((key) => {
        if (isPlainObject(source[key])) {
          if (!(key in target)) {
            Object.assign(output, { [key]: source[key] });
          } else {
            output[key] = mergeDeep(target[key], source[key]);
          }
        } else {
          Object.assign(output, { [key]: source[key] });
        }
      });
    }
    return output;
  }
  var Extension = class _Extension {
    constructor(config = {}) {
      this.type = "extension";
      this.name = "extension";
      this.parent = null;
      this.child = null;
      this.config = {
        name: this.name,
        defaultOptions: {},
      };
      this.config = {
        ...this.config,
        ...config,
      };
      this.name = this.config.name;
      if (config.defaultOptions) {
        console.warn(
          `[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`
        );
      }
      this.options = this.config.defaultOptions;
      if (this.config.addOptions) {
        this.options = callOrReturn(
          getExtensionField(this, "addOptions", {
            name: this.name,
          })
        );
      }
      this.storage =
        callOrReturn(
          getExtensionField(this, "addStorage", {
            name: this.name,
            options: this.options,
          })
        ) || {};
    }
    static create(config = {}) {
      return new _Extension(config);
    }
    configure(options = {}) {
      const extension = this.extend();
      extension.options = mergeDeep(this.options, options);
      extension.storage = callOrReturn(
        getExtensionField(extension, "addStorage", {
          name: extension.name,
          options: extension.options,
        })
      );
      return extension;
    }
    extend(extendedConfig = {}) {
      const extension = new _Extension(extendedConfig);
      extension.parent = this;
      this.child = extension;
      extension.name = extendedConfig.name
        ? extendedConfig.name
        : extension.parent.name;
      if (extendedConfig.defaultOptions) {
        console.warn(
          `[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`
        );
      }
      extension.options = callOrReturn(
        getExtensionField(extension, "addOptions", {
          name: extension.name,
        })
      );
      extension.storage = callOrReturn(
        getExtensionField(extension, "addStorage", {
          name: extension.name,
          options: extension.options,
        })
      );
      return extension;
    }
  };
  function getTextBetween(startNode, range, options) {
    const { from, to } = range;
    const { blockSeparator = "\n\n", textSerializers = {} } = options || {};
    let text = "";
    let separated = true;
    startNode.nodesBetween(from, to, (node, pos, parent, index) => {
      var _a;
      const textSerializer =
        textSerializers === null || textSerializers === void 0
          ? void 0
          : textSerializers[node.type.name];
      if (textSerializer) {
        if (node.isBlock && !separated) {
          text += blockSeparator;
          separated = true;
        }
        if (parent) {
          text += textSerializer({
            node,
            pos,
            parent,
            index,
            range,
          });
        }
      } else if (node.isText) {
        text +=
          (_a = node === null || node === void 0 ? void 0 : node.text) ===
            null || _a === void 0
            ? void 0
            : _a.slice(Math.max(from, pos) - pos, to - pos);
        separated = false;
      } else if (node.isBlock && !separated) {
        text += blockSeparator;
        separated = true;
      }
    });
    return text;
  }
  function getTextSerializersFromSchema(schema) {
    return Object.fromEntries(
      Object.entries(schema.nodes)
        .filter(([, node]) => node.spec.toText)
        .map(([name, node]) => [name, node.spec.toText])
    );
  }
  var ClipboardTextSerializer = Extension.create({
    name: "clipboardTextSerializer",
    addProseMirrorPlugins() {
      return [
        new Plugin({
          key: new PluginKey("clipboardTextSerializer"),
          props: {
            clipboardTextSerializer: () => {
              const { editor } = this;
              const { state, schema } = editor;
              const { doc, selection } = state;
              const { ranges } = selection;
              const from = Math.min(
                ...ranges.map((range2) => range2.$from.pos)
              );
              const to = Math.max(...ranges.map((range2) => range2.$to.pos));
              const textSerializers = getTextSerializersFromSchema(schema);
              const range = { from, to };
              return getTextBetween(doc, range, {
                textSerializers,
              });
            },
          },
        }),
      ];
    },
  });
  var blur =
    () =>
    ({ editor, view }) => {
      requestAnimationFrame(() => {
        var _a;
        if (!editor.isDestroyed) {
          view.dom.blur();
          (_a =
            window === null || window === void 0
              ? void 0
              : window.getSelection()) === null || _a === void 0
            ? void 0
            : _a.removeAllRanges();
        }
      });
      return true;
    };
  var clearContent =
    (emitUpdate = false) =>
    ({ commands: commands2 }) => {
      return commands2.setContent("", emitUpdate);
    };
  var clearNodes =
    () =>
    ({ state, tr, dispatch }) => {
      const { selection } = tr;
      const { ranges } = selection;
      if (!dispatch) {
        return true;
      }
      ranges.forEach(({ $from, $to }) => {
        state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {
          if (node.type.isText) {
            return;
          }
          const { doc, mapping } = tr;
          const $mappedFrom = doc.resolve(mapping.map(pos));
          const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));
          const nodeRange = $mappedFrom.blockRange($mappedTo);
          if (!nodeRange) {
            return;
          }
          const targetLiftDepth = liftTarget(nodeRange);
          if (node.type.isTextblock) {
            const { defaultType } = $mappedFrom.parent.contentMatchAt(
              $mappedFrom.index()
            );
            tr.setNodeMarkup(nodeRange.start, defaultType);
          }
          if (targetLiftDepth || targetLiftDepth === 0) {
            tr.lift(nodeRange, targetLiftDepth);
          }
        });
      });
      return true;
    };
  var command = (fn) => (props) => {
    return fn(props);
  };
  var createParagraphNear2 =
    () =>
    ({ state, dispatch }) => {
      return createParagraphNear(state, dispatch);
    };
  var cut =
    (originRange, targetPos) =>
    ({ editor, tr }) => {
      const { state } = editor;
      const contentSlice = state.doc.slice(originRange.from, originRange.to);
      tr.deleteRange(originRange.from, originRange.to);
      const newPos = tr.mapping.map(targetPos);
      tr.insert(newPos, contentSlice.content);
      tr.setSelection(new TextSelection(tr.doc.resolve(newPos - 1)));
      return true;
    };
  var deleteCurrentNode =
    () =>
    ({ tr, dispatch }) => {
      const { selection } = tr;
      const currentNode = selection.$anchor.node();
      if (currentNode.content.size > 0) {
        return false;
      }
      const $pos = tr.selection.$anchor;
      for (let depth = $pos.depth; depth > 0; depth -= 1) {
        const node = $pos.node(depth);
        if (node.type === currentNode.type) {
          if (dispatch) {
            const from = $pos.before(depth);
            const to = $pos.after(depth);
            tr.delete(from, to).scrollIntoView();
          }
          return true;
        }
      }
      return false;
    };
  var deleteNode =
    (typeOrName) =>
    ({ tr, state, dispatch }) => {
      const type = getNodeType(typeOrName, state.schema);
      const $pos = tr.selection.$anchor;
      for (let depth = $pos.depth; depth > 0; depth -= 1) {
        const node = $pos.node(depth);
        if (node.type === type) {
          if (dispatch) {
            const from = $pos.before(depth);
            const to = $pos.after(depth);
            tr.delete(from, to).scrollIntoView();
          }
          return true;
        }
      }
      return false;
    };
  var deleteRange =
    (range) =>
    ({ tr, dispatch }) => {
      const { from, to } = range;
      if (dispatch) {
        tr.delete(from, to);
      }
      return true;
    };
  var deleteSelection2 =
    () =>
    ({ state, dispatch }) => {
      return deleteSelection(state, dispatch);
    };
  var enter =
    () =>
    ({ commands: commands2 }) => {
      return commands2.keyboardShortcut("Enter");
    };
  var exitCode2 =
    () =>
    ({ state, dispatch }) => {
      return exitCode(state, dispatch);
    };
  function objectIncludes(object1, object2, options = { strict: true }) {
    const keys2 = Object.keys(object2);
    if (!keys2.length) {
      return true;
    }
    return keys2.every((key) => {
      if (options.strict) {
        return object2[key] === object1[key];
      }
      if (isRegExp(object2[key])) {
        return object2[key].test(object1[key]);
      }
      return object2[key] === object1[key];
    });
  }
  function findMarkInSet(marks, type, attributes = {}) {
    return marks.find((item) => {
      return item.type === type && objectIncludes(item.attrs, attributes);
    });
  }
  function isMarkInSet(marks, type, attributes = {}) {
    return !!findMarkInSet(marks, type, attributes);
  }
  function getMarkRange($pos, type, attributes = {}) {
    if (!$pos || !type) {
      return;
    }
    let start = $pos.parent.childAfter($pos.parentOffset);
    if ($pos.parentOffset === start.offset && start.offset !== 0) {
      start = $pos.parent.childBefore($pos.parentOffset);
    }
    if (!start.node) {
      return;
    }
    const mark = findMarkInSet([...start.node.marks], type, attributes);
    if (!mark) {
      return;
    }
    let startIndex = start.index;
    let startPos = $pos.start() + start.offset;
    let endIndex = startIndex + 1;
    let endPos = startPos + start.node.nodeSize;
    findMarkInSet([...start.node.marks], type, attributes);
    while (
      startIndex > 0 &&
      mark.isInSet($pos.parent.child(startIndex - 1).marks)
    ) {
      startIndex -= 1;
      startPos -= $pos.parent.child(startIndex).nodeSize;
    }
    while (
      endIndex < $pos.parent.childCount &&
      isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)
    ) {
      endPos += $pos.parent.child(endIndex).nodeSize;
      endIndex += 1;
    }
    return {
      from: startPos,
      to: endPos,
    };
  }
  function getMarkType(nameOrType, schema) {
    if (typeof nameOrType === "string") {
      if (!schema.marks[nameOrType]) {
        throw Error(
          `There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`
        );
      }
      return schema.marks[nameOrType];
    }
    return nameOrType;
  }
  var extendMarkRange =
    (typeOrName, attributes = {}) =>
    ({ tr, state, dispatch }) => {
      const type = getMarkType(typeOrName, state.schema);
      const { doc, selection } = tr;
      const { $from, from, to } = selection;
      if (dispatch) {
        const range = getMarkRange($from, type, attributes);
        if (range && range.from <= from && range.to >= to) {
          const newSelection = TextSelection.create(doc, range.from, range.to);
          tr.setSelection(newSelection);
        }
      }
      return true;
    };
  var first = (commands2) => (props) => {
    const items =
      typeof commands2 === "function" ? commands2(props) : commands2;
    for (let i = 0; i < items.length; i += 1) {
      if (items[i](props)) {
        return true;
      }
    }
    return false;
  };
  function isTextSelection(value) {
    return value instanceof TextSelection;
  }
  function minMax(value = 0, min = 0, max = 0) {
    return Math.min(Math.max(value, min), max);
  }
  function resolveFocusPosition(doc, position = null) {
    if (!position) {
      return null;
    }
    const selectionAtStart = Selection.atStart(doc);
    const selectionAtEnd = Selection.atEnd(doc);
    if (position === "start" || position === true) {
      return selectionAtStart;
    }
    if (position === "end") {
      return selectionAtEnd;
    }
    const minPos = selectionAtStart.from;
    const maxPos = selectionAtEnd.to;
    if (position === "all") {
      return TextSelection.create(
        doc,
        minMax(0, minPos, maxPos),
        minMax(doc.content.size, minPos, maxPos)
      );
    }
    return TextSelection.create(
      doc,
      minMax(position, minPos, maxPos),
      minMax(position, minPos, maxPos)
    );
  }
  function isiOS() {
    return (
      [
        "iPad Simulator",
        "iPhone Simulator",
        "iPod Simulator",
        "iPad",
        "iPhone",
        "iPod",
      ].includes(navigator.platform) ||
      (navigator.userAgent.includes("Mac") && "ontouchend" in document)
    );
  }
  var focus =
    (position = null, options = {}) =>
    ({ editor, view, tr, dispatch }) => {
      options = {
        scrollIntoView: true,
        ...options,
      };
      const delayedFocus = () => {
        if (isiOS()) {
          view.dom.focus();
        }
        requestAnimationFrame(() => {
          if (!editor.isDestroyed) {
            view.focus();
            if (
              options === null || options === void 0
                ? void 0
                : options.scrollIntoView
            ) {
              editor.commands.scrollIntoView();
            }
          }
        });
      };
      if ((view.hasFocus() && position === null) || position === false) {
        return true;
      }
      if (
        dispatch &&
        position === null &&
        !isTextSelection(editor.state.selection)
      ) {
        delayedFocus();
        return true;
      }
      const selection =
        resolveFocusPosition(tr.doc, position) || editor.state.selection;
      const isSameSelection = editor.state.selection.eq(selection);
      if (dispatch) {
        if (!isSameSelection) {
          tr.setSelection(selection);
        }
        if (isSameSelection && tr.storedMarks) {
          tr.setStoredMarks(tr.storedMarks);
        }
        delayedFocus();
      }
      return true;
    };
  var forEach = (items, fn) => (props) => {
    return items.every((item, index) => fn(item, { ...props, index }));
  };
  var insertContent =
    (value, options) =>
    ({ tr, commands: commands2 }) => {
      return commands2.insertContentAt(
        { from: tr.selection.from, to: tr.selection.to },
        value,
        options
      );
    };
  function elementFromString(value) {
    const wrappedValue = `<body>${value}</body>`;
    return new window.DOMParser().parseFromString(wrappedValue, "text/html")
      .body;
  }
  function createNodeFromContent(content, schema, options) {
    options = {
      slice: true,
      parseOptions: {},
      ...options,
    };
    if (typeof content === "object" && content !== null) {
      try {
        if (Array.isArray(content) && content.length > 0) {
          return Fragment.fromArray(
            content.map((item) => schema.nodeFromJSON(item))
          );
        }
        return schema.nodeFromJSON(content);
      } catch (error) {
        console.warn(
          "[tiptap warn]: Invalid content.",
          "Passed value:",
          content,
          "Error:",
          error
        );
        return createNodeFromContent("", schema, options);
      }
    }
    if (typeof content === "string") {
      const parser = DOMParser.fromSchema(schema);
      return options.slice
        ? parser.parseSlice(elementFromString(content), options.parseOptions)
            .content
        : parser.parse(elementFromString(content), options.parseOptions);
    }
    return createNodeFromContent("", schema, options);
  }
  function selectionToInsertionEnd2(tr, startLen, bias) {
    const last = tr.steps.length - 1;
    if (last < startLen) {
      return;
    }
    const step = tr.steps[last];
    if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {
      return;
    }
    const map = tr.mapping.maps[last];
    let end = 0;
    map.forEach((_from, _to, _newFrom, newTo) => {
      if (end === 0) {
        end = newTo;
      }
    });
    tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
  }
  var isFragment = (nodeOrFragment) => {
    return nodeOrFragment.toString().startsWith("<");
  };
  var insertContentAt =
    (position, value, options) =>
    ({ tr, dispatch, editor }) => {
      if (dispatch) {
        options = {
          parseOptions: {},
          updateSelection: true,
          ...options,
        };
        const content = createNodeFromContent(value, editor.schema, {
          parseOptions: {
            preserveWhitespace: "full",
            ...options.parseOptions,
          },
        });
        if (content.toString() === "<>") {
          return true;
        }
        let { from, to } =
          typeof position === "number"
            ? { from: position, to: position }
            : { from: position.from, to: position.to };
        let isOnlyTextContent = true;
        let isOnlyBlockContent = true;
        const nodes = isFragment(content) ? content : [content];
        nodes.forEach((node) => {
          node.check();
          isOnlyTextContent = isOnlyTextContent
            ? node.isText && node.marks.length === 0
            : false;
          isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;
        });
        if (from === to && isOnlyBlockContent) {
          const { parent } = tr.doc.resolve(from);
          const isEmptyTextBlock =
            parent.isTextblock && !parent.type.spec.code && !parent.childCount;
          if (isEmptyTextBlock) {
            from -= 1;
            to += 1;
          }
        }
        if (isOnlyTextContent) {
          if (Array.isArray(value)) {
            tr.insertText(value.map((v) => v.text || "").join(""), from, to);
          } else if (typeof value === "object" && !!value && !!value.text) {
            tr.insertText(value.text, from, to);
          } else {
            tr.insertText(value, from, to);
          }
        } else {
          tr.replaceWith(from, to, content);
        }
        if (options.updateSelection) {
          selectionToInsertionEnd2(tr, tr.steps.length - 1, -1);
        }
      }
      return true;
    };
  var joinUp2 =
    () =>
    ({ state, dispatch }) => {
      return joinUp(state, dispatch);
    };
  var joinDown2 =
    () =>
    ({ state, dispatch }) => {
      return joinDown(state, dispatch);
    };
  var joinBackward2 =
    () =>
    ({ state, dispatch }) => {
      return joinBackward(state, dispatch);
    };
  var joinForward2 =
    () =>
    ({ state, dispatch }) => {
      return joinForward(state, dispatch);
    };
  var joinItemBackward =
    () =>
    ({ tr, state, dispatch }) => {
      try {
        const point = joinPoint(state.doc, state.selection.$from.pos, -1);
        if (point === null || point === void 0) {
          return false;
        }
        tr.join(point, 2);
        if (dispatch) {
          dispatch(tr);
        }
        return true;
      } catch {
        return false;
      }
    };
  var joinItemForward =
    () =>
    ({ state, dispatch, tr }) => {
      try {
        const point = joinPoint(state.doc, state.selection.$from.pos, 1);
        if (point === null || point === void 0) {
          return false;
        }
        tr.join(point, 2);
        if (dispatch) {
          dispatch(tr);
        }
        return true;
      } catch (e) {
        return false;
      }
    };
  function isMacOS() {
    return typeof navigator !== "undefined"
      ? /Mac/.test(navigator.platform)
      : false;
  }
  function normalizeKeyName(name) {
    const parts = name.split(/-(?!$)/);
    let result = parts[parts.length - 1];
    if (result === "Space") {
      result = " ";
    }
    let alt;
    let ctrl;
    let shift;
    let meta;
    for (let i = 0; i < parts.length - 1; i += 1) {
      const mod = parts[i];
      if (/^(cmd|meta|m)$/i.test(mod)) {
        meta = true;
      } else if (/^a(lt)?$/i.test(mod)) {
        alt = true;
      } else if (/^(c|ctrl|control)$/i.test(mod)) {
        ctrl = true;
      } else if (/^s(hift)?$/i.test(mod)) {
        shift = true;
      } else if (/^mod$/i.test(mod)) {
        if (isiOS() || isMacOS()) {
          meta = true;
        } else {
          ctrl = true;
        }
      } else {
        throw new Error(`Unrecognized modifier name: ${mod}`);
      }
    }
    if (alt) {
      result = `Alt-${result}`;
    }
    if (ctrl) {
      result = `Ctrl-${result}`;
    }
    if (meta) {
      result = `Meta-${result}`;
    }
    if (shift) {
      result = `Shift-${result}`;
    }
    return result;
  }
  var keyboardShortcut =
    (name) =>
    ({ editor, view, tr, dispatch }) => {
      const keys2 = normalizeKeyName(name).split(/-(?!$)/);
      const key = keys2.find(
        (item) => !["Alt", "Ctrl", "Meta", "Shift"].includes(item)
      );
      const event = new KeyboardEvent("keydown", {
        key: key === "Space" ? " " : key,
        altKey: keys2.includes("Alt"),
        ctrlKey: keys2.includes("Ctrl"),
        metaKey: keys2.includes("Meta"),
        shiftKey: keys2.includes("Shift"),
        bubbles: true,
        cancelable: true,
      });
      const capturedTransaction = editor.captureTransaction(() => {
        view.someProp("handleKeyDown", (f) => f(view, event));
      });
      capturedTransaction === null || capturedTransaction === void 0
        ? void 0
        : capturedTransaction.steps.forEach((step) => {
            const newStep = step.map(tr.mapping);
            if (newStep && dispatch) {
              tr.maybeStep(newStep);
            }
          });
      return true;
    };
  function isNodeActive(state, typeOrName, attributes = {}) {
    const { from, to, empty } = state.selection;
    const type = typeOrName ? getNodeType(typeOrName, state.schema) : null;
    const nodeRanges = [];
    state.doc.nodesBetween(from, to, (node, pos) => {
      if (node.isText) {
        return;
      }
      const relativeFrom = Math.max(from, pos);
      const relativeTo = Math.min(to, pos + node.nodeSize);
      nodeRanges.push({
        node,
        from: relativeFrom,
        to: relativeTo,
      });
    });
    const selectionRange = to - from;
    const matchedNodeRanges = nodeRanges
      .filter((nodeRange) => {
        if (!type) {
          return true;
        }
        return type.name === nodeRange.node.type.name;
      })
      .filter((nodeRange) =>
        objectIncludes(nodeRange.node.attrs, attributes, { strict: false })
      );
    if (empty) {
      return !!matchedNodeRanges.length;
    }
    const range = matchedNodeRanges.reduce(
      (sum, nodeRange) => sum + nodeRange.to - nodeRange.from,
      0
    );
    return range >= selectionRange;
  }
  var lift2 =
    (typeOrName, attributes = {}) =>
    ({ state, dispatch }) => {
      const type = getNodeType(typeOrName, state.schema);
      const isActive = isNodeActive(state, type, attributes);
      if (!isActive) {
        return false;
      }
      return lift(state, dispatch);
    };
  var liftEmptyBlock2 =
    () =>
    ({ state, dispatch }) => {
      return liftEmptyBlock(state, dispatch);
    };
  var liftListItem2 =
    (typeOrName) =>
    ({ state, dispatch }) => {
      const type = getNodeType(typeOrName, state.schema);
      return liftListItem(type)(state, dispatch);
    };
  var newlineInCode2 =
    () =>
    ({ state, dispatch }) => {
      return newlineInCode(state, dispatch);
    };
  function getSchemaTypeNameByName(name, schema) {
    if (schema.nodes[name]) {
      return "node";
    }
    if (schema.marks[name]) {
      return "mark";
    }
    return null;
  }
  function deleteProps(obj, propOrProps) {
    const props = typeof propOrProps === "string" ? [propOrProps] : propOrProps;
    return Object.keys(obj).reduce((newObj, prop) => {
      if (!props.includes(prop)) {
        newObj[prop] = obj[prop];
      }
      return newObj;
    }, {});
  }
  var resetAttributes =
    (typeOrName, attributes) =>
    ({ tr, state, dispatch }) => {
      let nodeType = null;
      let markType = null;
      const schemaType = getSchemaTypeNameByName(
        typeof typeOrName === "string" ? typeOrName : typeOrName.name,
        state.schema
      );
      if (!schemaType) {
        return false;
      }
      if (schemaType === "node") {
        nodeType = getNodeType(typeOrName, state.schema);
      }
      if (schemaType === "mark") {
        markType = getMarkType(typeOrName, state.schema);
      }
      if (dispatch) {
        tr.selection.ranges.forEach((range) => {
          state.doc.nodesBetween(
            range.$from.pos,
            range.$to.pos,
            (node, pos) => {
              if (nodeType && nodeType === node.type) {
                tr.setNodeMarkup(
                  pos,
                  void 0,
                  deleteProps(node.attrs, attributes)
                );
              }
              if (markType && node.marks.length) {
                node.marks.forEach((mark) => {
                  if (markType === mark.type) {
                    tr.addMark(
                      pos,
                      pos + node.nodeSize,
                      markType.create(deleteProps(mark.attrs, attributes))
                    );
                  }
                });
              }
            }
          );
        });
      }
      return true;
    };
  var scrollIntoView =
    () =>
    ({ tr, dispatch }) => {
      if (dispatch) {
        tr.scrollIntoView();
      }
      return true;
    };
  var selectAll2 =
    () =>
    ({ tr, commands: commands2 }) => {
      return commands2.setTextSelection({
        from: 0,
        to: tr.doc.content.size,
      });
    };
  var selectNodeBackward2 =
    () =>
    ({ state, dispatch }) => {
      return selectNodeBackward(state, dispatch);
    };
  var selectNodeForward2 =
    () =>
    ({ state, dispatch }) => {
      return selectNodeForward(state, dispatch);
    };
  var selectParentNode2 =
    () =>
    ({ state, dispatch }) => {
      return selectParentNode(state, dispatch);
    };
  var selectTextblockEnd2 =
    () =>
    ({ state, dispatch }) => {
      return selectTextblockEnd(state, dispatch);
    };
  var selectTextblockStart2 =
    () =>
    ({ state, dispatch }) => {
      return selectTextblockStart(state, dispatch);
    };
  function createDocument(content, schema, parseOptions = {}) {
    return createNodeFromContent(content, schema, {
      slice: false,
      parseOptions,
    });
  }
  var setContent =
    (content, emitUpdate = false, parseOptions = {}) =>
    ({ tr, editor, dispatch }) => {
      const { doc } = tr;
      const document2 = createDocument(content, editor.schema, parseOptions);
      if (dispatch) {
        tr.replaceWith(0, doc.content.size, document2).setMeta(
          "preventUpdate",
          !emitUpdate
        );
      }
      return true;
    };
  function getMarkAttributes(state, typeOrName) {
    const type = getMarkType(typeOrName, state.schema);
    const { from, to, empty } = state.selection;
    const marks = [];
    if (empty) {
      if (state.storedMarks) {
        marks.push(...state.storedMarks);
      }
      marks.push(...state.selection.$head.marks());
    } else {
      state.doc.nodesBetween(from, to, (node) => {
        marks.push(...node.marks);
      });
    }
    const mark = marks.find((markItem) => markItem.type.name === type.name);
    if (!mark) {
      return {};
    }
    return { ...mark.attrs };
  }
  function defaultBlockAt2(match) {
    for (let i = 0; i < match.edgeCount; i += 1) {
      const { type } = match.edge(i);
      if (type.isTextblock && !type.hasRequiredAttrs()) {
        return type;
      }
    }
    return null;
  }
  function findParentNodeClosestToPos($pos, predicate) {
    for (let i = $pos.depth; i > 0; i -= 1) {
      const node = $pos.node(i);
      if (predicate(node)) {
        return {
          pos: i > 0 ? $pos.before(i) : 0,
          start: $pos.start(i),
          depth: i,
          node,
        };
      }
    }
  }
  function findParentNode(predicate) {
    return (selection) =>
      findParentNodeClosestToPos(selection.$from, predicate);
  }
  function getSplittedAttributes(extensionAttributes, typeName, attributes) {
    return Object.fromEntries(
      Object.entries(attributes).filter(([name]) => {
        const extensionAttribute = extensionAttributes.find((item) => {
          return item.type === typeName && item.name === name;
        });
        if (!extensionAttribute) {
          return false;
        }
        return extensionAttribute.attribute.keepOnSplit;
      })
    );
  }
  function isMarkActive(state, typeOrName, attributes = {}) {
    const { empty, ranges } = state.selection;
    const type = typeOrName ? getMarkType(typeOrName, state.schema) : null;
    if (empty) {
      return !!(state.storedMarks || state.selection.$from.marks())
        .filter((mark) => {
          if (!type) {
            return true;
          }
          return type.name === mark.type.name;
        })
        .find((mark) =>
          objectIncludes(mark.attrs, attributes, { strict: false })
        );
    }
    let selectionRange = 0;
    const markRanges = [];
    ranges.forEach(({ $from, $to }) => {
      const from = $from.pos;
      const to = $to.pos;
      state.doc.nodesBetween(from, to, (node, pos) => {
        if (!node.isText && !node.marks.length) {
          return;
        }
        const relativeFrom = Math.max(from, pos);
        const relativeTo = Math.min(to, pos + node.nodeSize);
        const range2 = relativeTo - relativeFrom;
        selectionRange += range2;
        markRanges.push(
          ...node.marks.map((mark) => ({
            mark,
            from: relativeFrom,
            to: relativeTo,
          }))
        );
      });
    });
    if (selectionRange === 0) {
      return false;
    }
    const matchedRange = markRanges
      .filter((markRange) => {
        if (!type) {
          return true;
        }
        return type.name === markRange.mark.type.name;
      })
      .filter((markRange) =>
        objectIncludes(markRange.mark.attrs, attributes, { strict: false })
      )
      .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);
    const excludedRange = markRanges
      .filter((markRange) => {
        if (!type) {
          return true;
        }
        return (
          markRange.mark.type !== type && markRange.mark.type.excludes(type)
        );
      })
      .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);
    const range =
      matchedRange > 0 ? matchedRange + excludedRange : matchedRange;
    return range >= selectionRange;
  }
  function isList(name, extensions) {
    const { nodeExtensions } = splitExtensions(extensions);
    const extension = nodeExtensions.find((item) => item.name === name);
    if (!extension) {
      return false;
    }
    const context = {
      name: extension.name,
      options: extension.options,
      storage: extension.storage,
    };
    const group = callOrReturn(getExtensionField(extension, "group", context));
    if (typeof group !== "string") {
      return false;
    }
    return group.split(" ").includes("list");
  }
  function canSetMark(state, tr, newMarkType) {
    var _a;
    const { selection } = tr;
    let cursor = null;
    if (isTextSelection(selection)) {
      cursor = selection.$cursor;
    }
    if (cursor) {
      const currentMarks =
        (_a = state.storedMarks) !== null && _a !== void 0
          ? _a
          : cursor.marks();
      return (
        !!newMarkType.isInSet(currentMarks) ||
        !currentMarks.some((mark) => mark.type.excludes(newMarkType))
      );
    }
    const { ranges } = selection;
    return ranges.some(({ $from, $to }) => {
      let someNodeSupportsMark =
        $from.depth === 0
          ? state.doc.inlineContent &&
            state.doc.type.allowsMarkType(newMarkType)
          : false;
      state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent) => {
        if (someNodeSupportsMark) {
          return false;
        }
        if (node.isInline) {
          const parentAllowsMarkType =
            !parent || parent.type.allowsMarkType(newMarkType);
          const currentMarksAllowMarkType =
            !!newMarkType.isInSet(node.marks) ||
            !node.marks.some((otherMark) =>
              otherMark.type.excludes(newMarkType)
            );
          someNodeSupportsMark =
            parentAllowsMarkType && currentMarksAllowMarkType;
        }
        return !someNodeSupportsMark;
      });
      return someNodeSupportsMark;
    });
  }
  var setMark =
    (typeOrName, attributes = {}) =>
    ({ tr, state, dispatch }) => {
      const { selection } = tr;
      const { empty, ranges } = selection;
      const type = getMarkType(typeOrName, state.schema);
      if (dispatch) {
        if (empty) {
          const oldAttributes = getMarkAttributes(state, type);
          tr.addStoredMark(
            type.create({
              ...oldAttributes,
              ...attributes,
            })
          );
        } else {
          ranges.forEach((range) => {
            const from = range.$from.pos;
            const to = range.$to.pos;
            state.doc.nodesBetween(from, to, (node, pos) => {
              const trimmedFrom = Math.max(pos, from);
              const trimmedTo = Math.min(pos + node.nodeSize, to);
              const someHasMark = node.marks.find((mark) => mark.type === type);
              if (someHasMark) {
                node.marks.forEach((mark) => {
                  if (type === mark.type) {
                    tr.addMark(
                      trimmedFrom,
                      trimmedTo,
                      type.create({
                        ...mark.attrs,
                        ...attributes,
                      })
                    );
                  }
                });
              } else {
                tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));
              }
            });
          });
        }
      }
      return canSetMark(state, tr, type);
    };
  var setMeta =
    (key, value) =>
    ({ tr }) => {
      tr.setMeta(key, value);
      return true;
    };
  var setNode =
    (typeOrName, attributes = {}) =>
    ({ state, dispatch, chain }) => {
      const type = getNodeType(typeOrName, state.schema);
      if (!type.isTextblock) {
        console.warn(
          '[tiptap warn]: Currently "setNode()" only supports text block nodes.'
        );
        return false;
      }
      return chain()
        .command(({ commands: commands2 }) => {
          const canSetBlock = setBlockType(type, attributes)(state);
          if (canSetBlock) {
            return true;
          }
          return commands2.clearNodes();
        })
        .command(({ state: updatedState }) => {
          return setBlockType(type, attributes)(updatedState, dispatch);
        })
        .run();
    };
  var setNodeSelection =
    (position) =>
    ({ tr, dispatch }) => {
      if (dispatch) {
        const { doc } = tr;
        const from = minMax(position, 0, doc.content.size);
        const selection = NodeSelection.create(doc, from);
        tr.setSelection(selection);
      }
      return true;
    };
  var setTextSelection =
    (position) =>
    ({ tr, dispatch }) => {
      if (dispatch) {
        const { doc } = tr;
        const { from, to } =
          typeof position === "number"
            ? { from: position, to: position }
            : position;
        const minPos = TextSelection.atStart(doc).from;
        const maxPos = TextSelection.atEnd(doc).to;
        const resolvedFrom = minMax(from, minPos, maxPos);
        const resolvedEnd = minMax(to, minPos, maxPos);
        const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd);
        tr.setSelection(selection);
      }
      return true;
    };
  var sinkListItem2 =
    (typeOrName) =>
    ({ state, dispatch }) => {
      const type = getNodeType(typeOrName, state.schema);
      return sinkListItem(type)(state, dispatch);
    };
  function ensureMarks(state, splittableMarks) {
    const marks =
      state.storedMarks ||
      (state.selection.$to.parentOffset && state.selection.$from.marks());
    if (marks) {
      const filteredMarks = marks.filter((mark) =>
        splittableMarks === null || splittableMarks === void 0
          ? void 0
          : splittableMarks.includes(mark.type.name)
      );
      state.tr.ensureMarks(filteredMarks);
    }
  }
  var splitBlock2 =
    ({ keepMarks = true } = {}) =>
    ({ tr, state, dispatch, editor }) => {
      const { selection, doc } = tr;
      const { $from, $to } = selection;
      const extensionAttributes = editor.extensionManager.attributes;
      const newAttributes = getSplittedAttributes(
        extensionAttributes,
        $from.node().type.name,
        $from.node().attrs
      );
      if (selection instanceof NodeSelection && selection.node.isBlock) {
        if (!$from.parentOffset || !canSplit(doc, $from.pos)) {
          return false;
        }
        if (dispatch) {
          if (keepMarks) {
            ensureMarks(state, editor.extensionManager.splittableMarks);
          }
          tr.split($from.pos).scrollIntoView();
        }
        return true;
      }
      if (!$from.parent.isBlock) {
        return false;
      }
      if (dispatch) {
        const atEnd = $to.parentOffset === $to.parent.content.size;
        if (selection instanceof TextSelection) {
          tr.deleteSelection();
        }
        const deflt =
          $from.depth === 0
            ? void 0
            : defaultBlockAt2(
                $from.node(-1).contentMatchAt($from.indexAfter(-1))
              );
        let types =
          atEnd && deflt
            ? [
                {
                  type: deflt,
                  attrs: newAttributes,
                },
              ]
            : void 0;
        let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);
        if (
          !types &&
          !can &&
          canSplit(
            tr.doc,
            tr.mapping.map($from.pos),
            1,
            deflt ? [{ type: deflt }] : void 0
          )
        ) {
          can = true;
          types = deflt
            ? [
                {
                  type: deflt,
                  attrs: newAttributes,
                },
              ]
            : void 0;
        }
        if (can) {
          tr.split(tr.mapping.map($from.pos), 1, types);
          if (
            deflt &&
            !atEnd &&
            !$from.parentOffset &&
            $from.parent.type !== deflt
          ) {
            const first2 = tr.mapping.map($from.before());
            const $first = tr.doc.resolve(first2);
            if (
              $from
                .node(-1)
                .canReplaceWith($first.index(), $first.index() + 1, deflt)
            ) {
              tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
            }
          }
        }
        if (keepMarks) {
          ensureMarks(state, editor.extensionManager.splittableMarks);
        }
        tr.scrollIntoView();
      }
      return true;
    };
  var splitListItem =
    (typeOrName) =>
    ({ tr, state, dispatch, editor }) => {
      var _a;
      const type = getNodeType(typeOrName, state.schema);
      const { $from, $to } = state.selection;
      const node = state.selection.node;
      if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {
        return false;
      }
      const grandParent = $from.node(-1);
      if (grandParent.type !== type) {
        return false;
      }
      const extensionAttributes = editor.extensionManager.attributes;
      if (
        $from.parent.content.size === 0 &&
        $from.node(-1).childCount === $from.indexAfter(-1)
      ) {
        if (
          $from.depth === 2 ||
          $from.node(-3).type !== type ||
          $from.index(-2) !== $from.node(-2).childCount - 1
        ) {
          return false;
        }
        if (dispatch) {
          let wrap = Fragment.empty;
          const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;
          for (
            let d = $from.depth - depthBefore;
            d >= $from.depth - 3;
            d -= 1
          ) {
            wrap = Fragment.from($from.node(d).copy(wrap));
          }
          const depthAfter =
            $from.indexAfter(-1) < $from.node(-2).childCount
              ? 1
              : $from.indexAfter(-2) < $from.node(-3).childCount
              ? 2
              : 3;
          const newNextTypeAttributes2 = getSplittedAttributes(
            extensionAttributes,
            $from.node().type.name,
            $from.node().attrs
          );
          const nextType2 =
            ((_a = type.contentMatch.defaultType) === null || _a === void 0
              ? void 0
              : _a.createAndFill(newNextTypeAttributes2)) || void 0;
          wrap = wrap.append(
            Fragment.from(type.createAndFill(null, nextType2) || void 0)
          );
          const start = $from.before($from.depth - (depthBefore - 1));
          tr.replace(
            start,
            $from.after(-depthAfter),
            new Slice(wrap, 4 - depthBefore, 0)
          );
          let sel = -1;
          tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {
            if (sel > -1) {
              return false;
            }
            if (n.isTextblock && n.content.size === 0) {
              sel = pos + 1;
            }
          });
          if (sel > -1) {
            tr.setSelection(TextSelection.near(tr.doc.resolve(sel)));
          }
          tr.scrollIntoView();
        }
        return true;
      }
      const nextType =
        $to.pos === $from.end()
          ? grandParent.contentMatchAt(0).defaultType
          : null;
      const newTypeAttributes = getSplittedAttributes(
        extensionAttributes,
        grandParent.type.name,
        grandParent.attrs
      );
      const newNextTypeAttributes = getSplittedAttributes(
        extensionAttributes,
        $from.node().type.name,
        $from.node().attrs
      );
      tr.delete($from.pos, $to.pos);
      const types = nextType
        ? [
            { type, attrs: newTypeAttributes },
            { type: nextType, attrs: newNextTypeAttributes },
          ]
        : [{ type, attrs: newTypeAttributes }];
      if (!canSplit(tr.doc, $from.pos, 2)) {
        return false;
      }
      if (dispatch) {
        const { selection, storedMarks } = state;
        const { splittableMarks } = editor.extensionManager;
        const marks =
          storedMarks ||
          (selection.$to.parentOffset && selection.$from.marks());
        tr.split($from.pos, 2, types).scrollIntoView();
        if (!marks || !dispatch) {
          return true;
        }
        const filteredMarks = marks.filter((mark) =>
          splittableMarks.includes(mark.type.name)
        );
        tr.ensureMarks(filteredMarks);
      }
      return true;
    };
  var joinListBackwards = (tr, listType) => {
    const list = findParentNode((node) => node.type === listType)(tr.selection);
    if (!list) {
      return true;
    }
    const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);
    if (before === void 0) {
      return true;
    }
    const nodeBefore = tr.doc.nodeAt(before);
    const canJoinBackwards =
      list.node.type ===
        (nodeBefore === null || nodeBefore === void 0
          ? void 0
          : nodeBefore.type) && canJoin(tr.doc, list.pos);
    if (!canJoinBackwards) {
      return true;
    }
    tr.join(list.pos);
    return true;
  };
  var joinListForwards = (tr, listType) => {
    const list = findParentNode((node) => node.type === listType)(tr.selection);
    if (!list) {
      return true;
    }
    const after = tr.doc.resolve(list.start).after(list.depth);
    if (after === void 0) {
      return true;
    }
    const nodeAfter = tr.doc.nodeAt(after);
    const canJoinForwards =
      list.node.type ===
        (nodeAfter === null || nodeAfter === void 0
          ? void 0
          : nodeAfter.type) && canJoin(tr.doc, after);
    if (!canJoinForwards) {
      return true;
    }
    tr.join(after);
    return true;
  };
  var toggleList =
    (listTypeOrName, itemTypeOrName, keepMarks, attributes = {}) =>
    ({ editor, tr, state, dispatch, chain, commands: commands2, can }) => {
      const { extensions, splittableMarks } = editor.extensionManager;
      const listType = getNodeType(listTypeOrName, state.schema);
      const itemType = getNodeType(itemTypeOrName, state.schema);
      const { selection, storedMarks } = state;
      const { $from, $to } = selection;
      const range = $from.blockRange($to);
      const marks =
        storedMarks || (selection.$to.parentOffset && selection.$from.marks());
      if (!range) {
        return false;
      }
      const parentList = findParentNode((node) =>
        isList(node.type.name, extensions)
      )(selection);
      if (
        range.depth >= 1 &&
        parentList &&
        range.depth - parentList.depth <= 1
      ) {
        if (parentList.node.type === listType) {
          return commands2.liftListItem(itemType);
        }
        if (
          isList(parentList.node.type.name, extensions) &&
          listType.validContent(parentList.node.content) &&
          dispatch
        ) {
          return chain()
            .command(() => {
              tr.setNodeMarkup(parentList.pos, listType);
              return true;
            })
            .command(() => joinListBackwards(tr, listType))
            .command(() => joinListForwards(tr, listType))
            .run();
        }
      }
      if (!keepMarks || !marks || !dispatch) {
        return chain()
          .command(() => {
            const canWrapInList = can().wrapInList(listType, attributes);
            if (canWrapInList) {
              return true;
            }
            return commands2.clearNodes();
          })
          .wrapInList(listType, attributes)
          .command(() => joinListBackwards(tr, listType))
          .command(() => joinListForwards(tr, listType))
          .run();
      }
      return chain()
        .command(() => {
          const canWrapInList = can().wrapInList(listType, attributes);
          const filteredMarks = marks.filter((mark) =>
            splittableMarks.includes(mark.type.name)
          );
          tr.ensureMarks(filteredMarks);
          if (canWrapInList) {
            return true;
          }
          return commands2.clearNodes();
        })
        .wrapInList(listType, attributes)
        .command(() => joinListBackwards(tr, listType))
        .command(() => joinListForwards(tr, listType))
        .run();
    };
  var toggleMark =
    (typeOrName, attributes = {}, options = {}) =>
    ({ state, commands: commands2 }) => {
      const { extendEmptyMarkRange = false } = options;
      const type = getMarkType(typeOrName, state.schema);
      const isActive = isMarkActive(state, type, attributes);
      if (isActive) {
        return commands2.unsetMark(type, { extendEmptyMarkRange });
      }
      return commands2.setMark(type, attributes);
    };
  var toggleNode =
    (typeOrName, toggleTypeOrName, attributes = {}) =>
    ({ state, commands: commands2 }) => {
      const type = getNodeType(typeOrName, state.schema);
      const toggleType = getNodeType(toggleTypeOrName, state.schema);
      const isActive = isNodeActive(state, type, attributes);
      if (isActive) {
        return commands2.setNode(toggleType);
      }
      return commands2.setNode(type, attributes);
    };
  var toggleWrap =
    (typeOrName, attributes = {}) =>
    ({ state, commands: commands2 }) => {
      const type = getNodeType(typeOrName, state.schema);
      const isActive = isNodeActive(state, type, attributes);
      if (isActive) {
        return commands2.lift(type);
      }
      return commands2.wrapIn(type, attributes);
    };
  var undoInputRule =
    () =>
    ({ state, dispatch }) => {
      const plugins = state.plugins;
      for (let i = 0; i < plugins.length; i += 1) {
        const plugin = plugins[i];
        let undoable;
        if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {
          if (dispatch) {
            const tr = state.tr;
            const toUndo = undoable.transform;
            for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {
              tr.step(toUndo.steps[j].invert(toUndo.docs[j]));
            }
            if (undoable.text) {
              const marks = tr.doc.resolve(undoable.from).marks();
              tr.replaceWith(
                undoable.from,
                undoable.to,
                state.schema.text(undoable.text, marks)
              );
            } else {
              tr.delete(undoable.from, undoable.to);
            }
          }
          return true;
        }
      }
      return false;
    };
  var unsetAllMarks =
    () =>
    ({ tr, dispatch }) => {
      const { selection } = tr;
      const { empty, ranges } = selection;
      if (empty) {
        return true;
      }
      if (dispatch) {
        ranges.forEach((range) => {
          tr.removeMark(range.$from.pos, range.$to.pos);
        });
      }
      return true;
    };
  var unsetMark =
    (typeOrName, options = {}) =>
    ({ tr, state, dispatch }) => {
      var _a;
      const { extendEmptyMarkRange = false } = options;
      const { selection } = tr;
      const type = getMarkType(typeOrName, state.schema);
      const { $from, empty, ranges } = selection;
      if (!dispatch) {
        return true;
      }
      if (empty && extendEmptyMarkRange) {
        let { from, to } = selection;
        const attrs =
          (_a = $from.marks().find((mark) => mark.type === type)) === null ||
          _a === void 0
            ? void 0
            : _a.attrs;
        const range = getMarkRange($from, type, attrs);
        if (range) {
          from = range.from;
          to = range.to;
        }
        tr.removeMark(from, to, type);
      } else {
        ranges.forEach((range) => {
          tr.removeMark(range.$from.pos, range.$to.pos, type);
        });
      }
      tr.removeStoredMark(type);
      return true;
    };
  var updateAttributes =
    (typeOrName, attributes = {}) =>
    ({ tr, state, dispatch }) => {
      let nodeType = null;
      let markType = null;
      const schemaType = getSchemaTypeNameByName(
        typeof typeOrName === "string" ? typeOrName : typeOrName.name,
        state.schema
      );
      if (!schemaType) {
        return false;
      }
      if (schemaType === "node") {
        nodeType = getNodeType(typeOrName, state.schema);
      }
      if (schemaType === "mark") {
        markType = getMarkType(typeOrName, state.schema);
      }
      if (dispatch) {
        tr.selection.ranges.forEach((range) => {
          const from = range.$from.pos;
          const to = range.$to.pos;
          state.doc.nodesBetween(from, to, (node, pos) => {
            if (nodeType && nodeType === node.type) {
              tr.setNodeMarkup(pos, void 0, {
                ...node.attrs,
                ...attributes,
              });
            }
            if (markType && node.marks.length) {
              node.marks.forEach((mark) => {
                if (markType === mark.type) {
                  const trimmedFrom = Math.max(pos, from);
                  const trimmedTo = Math.min(pos + node.nodeSize, to);
                  tr.addMark(
                    trimmedFrom,
                    trimmedTo,
                    markType.create({
                      ...mark.attrs,
                      ...attributes,
                    })
                  );
                }
              });
            }
          });
        });
      }
      return true;
    };
  var wrapIn2 =
    (typeOrName, attributes = {}) =>
    ({ state, dispatch }) => {
      const type = getNodeType(typeOrName, state.schema);
      return wrapIn(type, attributes)(state, dispatch);
    };
  var wrapInList2 =
    (typeOrName, attributes = {}) =>
    ({ state, dispatch }) => {
      const type = getNodeType(typeOrName, state.schema);
      return wrapInList(type, attributes)(state, dispatch);
    };
  var commands = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    blur,
    clearContent,
    clearNodes,
    command,
    createParagraphNear: createParagraphNear2,
    cut,
    deleteCurrentNode,
    deleteNode,
    deleteRange,
    deleteSelection: deleteSelection2,
    enter,
    exitCode: exitCode2,
    extendMarkRange,
    first,
    focus,
    forEach,
    insertContent,
    insertContentAt,
    joinUp: joinUp2,
    joinDown: joinDown2,
    joinBackward: joinBackward2,
    joinForward: joinForward2,
    joinItemBackward,
    joinItemForward,
    keyboardShortcut,
    lift: lift2,
    liftEmptyBlock: liftEmptyBlock2,
    liftListItem: liftListItem2,
    newlineInCode: newlineInCode2,
    resetAttributes,
    scrollIntoView,
    selectAll: selectAll2,
    selectNodeBackward: selectNodeBackward2,
    selectNodeForward: selectNodeForward2,
    selectParentNode: selectParentNode2,
    selectTextblockEnd: selectTextblockEnd2,
    selectTextblockStart: selectTextblockStart2,
    setContent,
    setMark,
    setMeta,
    setNode,
    setNodeSelection,
    setTextSelection,
    sinkListItem: sinkListItem2,
    splitBlock: splitBlock2,
    splitListItem,
    toggleList,
    toggleMark,
    toggleNode,
    toggleWrap,
    undoInputRule,
    unsetAllMarks,
    unsetMark,
    updateAttributes,
    wrapIn: wrapIn2,
    wrapInList: wrapInList2,
  });
  var Commands = Extension.create({
    name: "commands",
    addCommands() {
      return {
        ...commands,
      };
    },
  });
  var Editable = Extension.create({
    name: "editable",
    addProseMirrorPlugins() {
      return [
        new Plugin({
          key: new PluginKey("editable"),
          props: {
            editable: () => this.editor.options.editable,
          },
        }),
      ];
    },
  });
  var FocusEvents = Extension.create({
    name: "focusEvents",
    addProseMirrorPlugins() {
      const { editor } = this;
      return [
        new Plugin({
          key: new PluginKey("focusEvents"),
          props: {
            handleDOMEvents: {
              focus: (view, event) => {
                editor.isFocused = true;
                const transaction = editor.state.tr
                  .setMeta("focus", { event })
                  .setMeta("addToHistory", false);
                view.dispatch(transaction);
                return false;
              },
              blur: (view, event) => {
                editor.isFocused = false;
                const transaction = editor.state.tr
                  .setMeta("blur", { event })
                  .setMeta("addToHistory", false);
                view.dispatch(transaction);
                return false;
              },
            },
          },
        }),
      ];
    },
  });
  var Keymap = Extension.create({
    name: "keymap",
    addKeyboardShortcuts() {
      const handleBackspace = () =>
        this.editor.commands.first(({ commands: commands2 }) => [
          () => commands2.undoInputRule(),
          // maybe convert first text block node to default node
          () =>
            commands2.command(({ tr }) => {
              const { selection, doc } = tr;
              const { empty, $anchor } = selection;
              const { pos, parent } = $anchor;
              const $parentPos = $anchor.parent.isTextblock
                ? tr.doc.resolve(pos - 1)
                : $anchor;
              const parentIsIsolating = $parentPos.parent.type.spec.isolating;
              const parentPos = $anchor.pos - $anchor.parentOffset;
              const isAtStart =
                parentIsIsolating && $parentPos.parent.childCount === 1
                  ? parentPos === $anchor.pos
                  : Selection.atStart(doc).from === pos;
              if (
                !empty ||
                !isAtStart ||
                !parent.type.isTextblock ||
                parent.textContent.length
              ) {
                return false;
              }
              return commands2.clearNodes();
            }),
          () => commands2.deleteSelection(),
          () => commands2.joinBackward(),
          () => commands2.selectNodeBackward(),
        ]);
      const handleDelete = () =>
        this.editor.commands.first(({ commands: commands2 }) => [
          () => commands2.deleteSelection(),
          () => commands2.deleteCurrentNode(),
          () => commands2.joinForward(),
          () => commands2.selectNodeForward(),
        ]);
      const handleEnter = () =>
        this.editor.commands.first(({ commands: commands2 }) => [
          () => commands2.newlineInCode(),
          () => commands2.createParagraphNear(),
          () => commands2.liftEmptyBlock(),
          () => commands2.splitBlock(),
        ]);
      const baseKeymap = {
        Enter: handleEnter,
        "Mod-Enter": () => this.editor.commands.exitCode(),
        Backspace: handleBackspace,
        "Mod-Backspace": handleBackspace,
        "Shift-Backspace": handleBackspace,
        Delete: handleDelete,
        "Mod-Delete": handleDelete,
        "Mod-a": () => this.editor.commands.selectAll(),
      };
      const pcKeymap = {
        ...baseKeymap,
      };
      const macKeymap = {
        ...baseKeymap,
        "Ctrl-h": handleBackspace,
        "Alt-Backspace": handleBackspace,
        "Ctrl-d": handleDelete,
        "Ctrl-Alt-Backspace": handleDelete,
        "Alt-Delete": handleDelete,
        "Alt-d": handleDelete,
        "Ctrl-a": () => this.editor.commands.selectTextblockStart(),
        "Ctrl-e": () => this.editor.commands.selectTextblockEnd(),
      };
      if (isiOS() || isMacOS()) {
        return macKeymap;
      }
      return pcKeymap;
    },
    addProseMirrorPlugins() {
      return [
        // With this plugin we check if the whole document was selected and deleted.
        // In this case we will additionally call `clearNodes()` to convert e.g. a heading
        // to a paragraph if necessary.
        // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well
        // with many other commands.
        new Plugin({
          key: new PluginKey("clearDocument"),
          appendTransaction: (transactions, oldState, newState) => {
            const docChanges =
              transactions.some((transaction) => transaction.docChanged) &&
              !oldState.doc.eq(newState.doc);
            if (!docChanges) {
              return;
            }
            const { empty, from, to } = oldState.selection;
            const allFrom = Selection.atStart(oldState.doc).from;
            const allEnd = Selection.atEnd(oldState.doc).to;
            const allWasSelected = from === allFrom && to === allEnd;
            if (empty || !allWasSelected) {
              return;
            }
            const isEmpty =
              newState.doc.textBetween(0, newState.doc.content.size, " ", " ")
                .length === 0;
            if (!isEmpty) {
              return;
            }
            const tr = newState.tr;
            const state = createChainableState({
              state: newState,
              transaction: tr,
            });
            const { commands: commands2 } = new CommandManager({
              editor: this.editor,
              state,
            });
            commands2.clearNodes();
            if (!tr.steps.length) {
              return;
            }
            return tr;
          },
        }),
      ];
    },
  });
  var Tabindex = Extension.create({
    name: "tabindex",
    addProseMirrorPlugins() {
      return [
        new Plugin({
          key: new PluginKey("tabindex"),
          props: {
            attributes: this.editor.isEditable ? { tabindex: "0" } : {},
          },
        }),
      ];
    },
  });
  function textInputRule(config) {
    return new InputRule({
      find: config.find,
      handler: ({ state, range, match }) => {
        let insert = config.replace;
        let start = range.from;
        const end = range.to;
        if (match[1]) {
          const offset = match[0].lastIndexOf(match[1]);
          insert += match[0].slice(offset + match[1].length);
          start += offset;
          const cutOff = start - end;
          if (cutOff > 0) {
            insert = match[0].slice(offset - cutOff, offset) + insert;
            start = end;
          }
        }
        state.tr.insertText(insert, start, end);
      },
    });
  }
  var Mark2 = class _Mark {
    constructor(config = {}) {
      this.type = "mark";
      this.name = "mark";
      this.parent = null;
      this.child = null;
      this.config = {
        name: this.name,
        defaultOptions: {},
      };
      this.config = {
        ...this.config,
        ...config,
      };
      this.name = this.config.name;
      if (config.defaultOptions) {
        console.warn(
          `[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`
        );
      }
      this.options = this.config.defaultOptions;
      if (this.config.addOptions) {
        this.options = callOrReturn(
          getExtensionField(this, "addOptions", {
            name: this.name,
          })
        );
      }
      this.storage =
        callOrReturn(
          getExtensionField(this, "addStorage", {
            name: this.name,
            options: this.options,
          })
        ) || {};
    }
    static create(config = {}) {
      return new _Mark(config);
    }
    configure(options = {}) {
      const extension = this.extend();
      extension.options = mergeDeep(this.options, options);
      extension.storage = callOrReturn(
        getExtensionField(extension, "addStorage", {
          name: extension.name,
          options: extension.options,
        })
      );
      return extension;
    }
    extend(extendedConfig = {}) {
      const extension = new _Mark(extendedConfig);
      extension.parent = this;
      this.child = extension;
      extension.name = extendedConfig.name
        ? extendedConfig.name
        : extension.parent.name;
      if (extendedConfig.defaultOptions) {
        console.warn(
          `[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`
        );
      }
      extension.options = callOrReturn(
        getExtensionField(extension, "addOptions", {
          name: extension.name,
        })
      );
      extension.storage = callOrReturn(
        getExtensionField(extension, "addStorage", {
          name: extension.name,
          options: extension.options,
        })
      );
      return extension;
    }
    static handleExit({ editor, mark }) {
      const { tr } = editor.state;
      const currentPos = editor.state.selection.$from;
      const isAtEnd = currentPos.pos === currentPos.end();
      if (isAtEnd) {
        const currentMarks = currentPos.marks();
        const isInMark = !!currentMarks.find(
          (m) =>
            (m === null || m === void 0 ? void 0 : m.type.name) === mark.name
        );
        if (!isInMark) {
          return false;
        }
        const removeMark = currentMarks.find(
          (m) =>
            (m === null || m === void 0 ? void 0 : m.type.name) === mark.name
        );
        if (removeMark) {
          tr.removeStoredMark(removeMark);
        }
        tr.insertText(" ", currentPos.pos);
        editor.view.dispatch(tr);
        return true;
      }
      return false;
    }
  };

  // node_modules/@tiptap/extension-text-align/dist/index.js
  var TextAlign = Extension.create({
    name: "textAlign",
    addOptions() {
      return {
        types: [],
        alignments: ["left", "center", "right", "justify"],
        defaultAlignment: "left",
      };
    },
    addGlobalAttributes() {
      return [
        {
          types: this.options.types,
          attributes: {
            textAlign: {
              default: this.options.defaultAlignment,
              parseHTML: (element) =>
                element.style.textAlign || this.options.defaultAlignment,
              renderHTML: (attributes) => {
                if (attributes.textAlign === this.options.defaultAlignment) {
                  return {};
                }
                return { style: `text-align: ${attributes.textAlign}` };
              },
            },
          },
        },
      ];
    },
    addCommands() {
      return {
        setTextAlign:
          (alignment) =>
          ({ commands: commands2 }) => {
            if (!this.options.alignments.includes(alignment)) {
              return false;
            }
            return this.options.types.every((type) =>
              commands2.updateAttributes(type, { textAlign: alignment })
            );
          },
        unsetTextAlign:
          () =>
          ({ commands: commands2 }) => {
            return this.options.types.every((type) =>
              commands2.resetAttributes(type, "textAlign")
            );
          },
      };
    },
    addKeyboardShortcuts() {
      return {
        "Mod-Shift-l": () => this.editor.commands.setTextAlign("left"),
        "Mod-Shift-e": () => this.editor.commands.setTextAlign("center"),
        "Mod-Shift-r": () => this.editor.commands.setTextAlign("right"),
        "Mod-Shift-j": () => this.editor.commands.setTextAlign("justify"),
      };
    },
  });

  // node_modules/@tiptap/extension-underline/dist/index.js
  var Underline = Mark2.create({
    name: "underline",
    addOptions() {
      return {
        HTMLAttributes: {},
      };
    },
    parseHTML() {
      return [
        {
          tag: "u",
        },
        {
          style: "text-decoration",
          consuming: false,
          getAttrs: (style) => (style.includes("underline") ? {} : false),
        },
      ];
    },
    renderHTML({ HTMLAttributes }) {
      return [
        "u",
        mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),
        0,
      ];
    },
    addCommands() {
      return {
        setUnderline:
          () =>
          ({ commands: commands2 }) => {
            return commands2.setMark(this.name);
          },
        toggleUnderline:
          () =>
          ({ commands: commands2 }) => {
            return commands2.toggleMark(this.name);
          },
        unsetUnderline:
          () =>
          ({ commands: commands2 }) => {
            return commands2.unsetMark(this.name);
          },
      };
    },
    addKeyboardShortcuts() {
      return {
        "Mod-u": () => this.editor.commands.toggleUnderline(),
        "Mod-U": () => this.editor.commands.toggleUnderline(),
      };
    },
  });

  // node_modules/@tiptap/extension-typography/dist/index.js
  var emDash = (override) =>
    textInputRule({
      find: /--$/,
      replace: override !== null && override !== void 0 ? override : "\u2014",
    });
  var ellipsis = (override) =>
    textInputRule({
      find: /\.\.\.$/,
      replace: override !== null && override !== void 0 ? override : "\u2026",
    });
  var openDoubleQuote = (override) =>
    textInputRule({
      find: /(?:^|[\s{[(<'"\u2018\u201C])(")$/,
      replace: override !== null && override !== void 0 ? override : "\u201C",
    });
  var closeDoubleQuote = (override) =>
    textInputRule({
      find: /"$/,
      replace: override !== null && override !== void 0 ? override : "\u201D",
    });
  var openSingleQuote = (override) =>
    textInputRule({
      find: /(?:^|[\s{[(<'"\u2018\u201C])(')$/,
      replace: override !== null && override !== void 0 ? override : "\u2018",
    });
  var closeSingleQuote = (override) =>
    textInputRule({
      find: /'$/,
      replace: override !== null && override !== void 0 ? override : "\u2019",
    });
  var leftArrow = (override) =>
    textInputRule({
      find: /<-$/,
      replace: override !== null && override !== void 0 ? override : "\u2190",
    });
  var rightArrow = (override) =>
    textInputRule({
      find: /->$/,
      replace: override !== null && override !== void 0 ? override : "\u2192",
    });
  var copyright = (override) =>
    textInputRule({
      find: /\(c\)$/,
      replace: override !== null && override !== void 0 ? override : "\xA9",
    });
  var trademark = (override) =>
    textInputRule({
      find: /\(tm\)$/,
      replace: override !== null && override !== void 0 ? override : "\u2122",
    });
  var servicemark = (override) =>
    textInputRule({
      find: /\(sm\)$/,
      replace: override !== null && override !== void 0 ? override : "\u2120",
    });
  var registeredTrademark = (override) =>
    textInputRule({
      find: /\(r\)$/,
      replace: override !== null && override !== void 0 ? override : "\xAE",
    });
  var oneHalf = (override) =>
    textInputRule({
      find: /(?:^|\s)(1\/2)$/,
      replace: override !== null && override !== void 0 ? override : "\xBD",
    });
  var plusMinus = (override) =>
    textInputRule({
      find: /\+\/-$/,
      replace: override !== null && override !== void 0 ? override : "\xB1",
    });
  var notEqual = (override) =>
    textInputRule({
      find: /!=$/,
      replace: override !== null && override !== void 0 ? override : "\u2260",
    });
  var laquo = (override) =>
    textInputRule({
      find: /<<$/,
      replace: override !== null && override !== void 0 ? override : "\xAB",
    });
  var raquo = (override) =>
    textInputRule({
      find: />>$/,
      replace: override !== null && override !== void 0 ? override : "\xBB",
    });
  var multiplication = (override) =>
    textInputRule({
      find: /\d+\s?([*x])\s?\d+$/,
      replace: override !== null && override !== void 0 ? override : "\xD7",
    });
  var superscriptTwo = (override) =>
    textInputRule({
      find: /\^2$/,
      replace: override !== null && override !== void 0 ? override : "\xB2",
    });
  var superscriptThree = (override) =>
    textInputRule({
      find: /\^3$/,
      replace: override !== null && override !== void 0 ? override : "\xB3",
    });
  var oneQuarter = (override) =>
    textInputRule({
      find: /(?:^|\s)(1\/4)$/,
      replace: override !== null && override !== void 0 ? override : "\xBC",
    });
  var threeQuarters = (override) =>
    textInputRule({
      find: /(?:^|\s)(3\/4)$/,
      replace: override !== null && override !== void 0 ? override : "\xBE",
    });
  var Typography = Extension.create({
    name: "typography",
    addInputRules() {
      const rules = [];
      if (this.options.emDash !== false) {
        rules.push(emDash(this.options.emDash));
      }
      if (this.options.ellipsis !== false) {
        rules.push(ellipsis(this.options.ellipsis));
      }
      if (this.options.openDoubleQuote !== false) {
        rules.push(openDoubleQuote(this.options.openDoubleQuote));
      }
      if (this.options.closeDoubleQuote !== false) {
        rules.push(closeDoubleQuote(this.options.closeDoubleQuote));
      }
      if (this.options.openSingleQuote !== false) {
        rules.push(openSingleQuote(this.options.openSingleQuote));
      }
      if (this.options.closeSingleQuote !== false) {
        rules.push(closeSingleQuote(this.options.closeSingleQuote));
      }
      if (this.options.leftArrow !== false) {
        rules.push(leftArrow(this.options.leftArrow));
      }
      if (this.options.rightArrow !== false) {
        rules.push(rightArrow(this.options.rightArrow));
      }
      if (this.options.copyright !== false) {
        rules.push(copyright(this.options.copyright));
      }
      if (this.options.trademark !== false) {
        rules.push(trademark(this.options.trademark));
      }
      if (this.options.servicemark !== false) {
        rules.push(servicemark(this.options.servicemark));
      }
      if (this.options.registeredTrademark !== false) {
        rules.push(registeredTrademark(this.options.registeredTrademark));
      }
      if (this.options.oneHalf !== false) {
        rules.push(oneHalf(this.options.oneHalf));
      }
      if (this.options.plusMinus !== false) {
        rules.push(plusMinus(this.options.plusMinus));
      }
      if (this.options.notEqual !== false) {
        rules.push(notEqual(this.options.notEqual));
      }
      if (this.options.laquo !== false) {
        rules.push(laquo(this.options.laquo));
      }
      if (this.options.raquo !== false) {
        rules.push(raquo(this.options.raquo));
      }
      if (this.options.multiplication !== false) {
        rules.push(multiplication(this.options.multiplication));
      }
      if (this.options.superscriptTwo !== false) {
        rules.push(superscriptTwo(this.options.superscriptTwo));
      }
      if (this.options.superscriptThree !== false) {
        rules.push(superscriptThree(this.options.superscriptThree));
      }
      if (this.options.oneQuarter !== false) {
        rules.push(oneQuarter(this.options.oneQuarter));
      }
      if (this.options.threeQuarters !== false) {
        rules.push(threeQuarters(this.options.threeQuarters));
      }
      return rules;
    },
  });

  // packages/support/resources/js/utils.js
  function registerExtension(id, callback) {
    if (id === void 0) {
      throw new Error("id can't be undefined when registering an extension");
    }
    if (callback === void 0) {
      throw new Error(
        "callback can't be undefined when registering an extension"
      );
    }
    document.addEventListener("alpine:init", () => {
      window.talltapRegistry.register(id, callback);
    });
  }

  // packages/starter-kit/resources/js/index.js
  registerExtension("starter-kit", () => [
    TextAlign.configure({ types: ["heading", "paragraph"] }),
    Underline,
    Typography,
  ]);
})();
//# sourceMappingURL=data:application/json;base64,
